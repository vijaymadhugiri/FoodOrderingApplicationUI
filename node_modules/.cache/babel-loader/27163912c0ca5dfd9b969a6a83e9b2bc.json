{"ast":null,"code":"import _objectSpread from \"/Users/pradeeph/Documents/Upgrad_FullStackDevelopment/Upgrad_Capstone_FrontEnd/food-ordering-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/pradeeph/Documents/Upgrad_FullStackDevelopment/Upgrad_Capstone_FrontEnd/food-ordering-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pradeeph/Documents/Upgrad_FullStackDevelopment/Upgrad_Capstone_FrontEnd/food-ordering-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/pradeeph/Documents/Upgrad_FullStackDevelopment/Upgrad_Capstone_FrontEnd/food-ordering-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/pradeeph/Documents/Upgrad_FullStackDevelopment/Upgrad_Capstone_FrontEnd/food-ordering-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/pradeeph/Documents/Upgrad_FullStackDevelopment/Upgrad_Capstone_FrontEnd/food-ordering-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/pradeeph/Documents/Upgrad_FullStackDevelopment/Upgrad_Capstone_FrontEnd/food-ordering-app/src/screens/checkout/Checkout.js\";\nimport React, { Component } from 'react';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport StepContent from '@material-ui/core/StepContent';\nimport { withStyles, Button, Tab, Tabs, IconButton, FormLabel, RadioGroup, FormControlLabel, Radio, Divider } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport Input from '@material-ui/core/Input';\nimport { FormControl, InputLabel, FormHelperText } from '@material-ui/core';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport PropTypes from 'prop-types';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport Paper from '@material-ui/core/Paper';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport FilledInput from '@material-ui/core/FilledInput';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Fade from '@material-ui/core/Fade';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { Redirect } from 'react-router-dom';\nimport 'font-awesome/css/font-awesome.min.css';\nimport Header from '../../common/header/Header';\nimport '../checkout/Checkout.css'; // Custom Styles to over ride material ui default styles\n\nvar styles = function styles(theme) {\n  return {\n    actionsContainer: {\n      //Style for the action container in the stepper\n      marginBottom: theme.spacing(2)\n    },\n    button: {\n      //style for the button in the stepper\n      marginTop: theme.spacing(2),\n      marginRight: theme.spacing(1)\n    },\n    stepper: {\n      //Style for the stepper\n      'padding-top': '0px',\n      '@media (max-width:600px)': {\n        'padding': '0px'\n      }\n    },\n    resetContainer: {\n      // Style for the reset container\n      padding: theme.spacing(3)\n    },\n    tab: {\n      //Style for the tab\n      \"font-weight\": 500,\n      '@media (max-width:600px)': {\n        width: '50%'\n      }\n    },\n    gridList: {\n      //Style for the Grid List \n      flexWrap: 'nowrap',\n      // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n      transform: 'translateZ(0)'\n    },\n    gridListTile: {\n      //Style for the Grid list tile .\n      textAlign: 'left',\n      margin: '30px 0px 20px 0px',\n      'border-style': 'solid',\n      'border-width': '0.5px 3px 3px 0.5px',\n      'border-radius': '10px',\n      'padding': '8px'\n    },\n    addressCheckButton: {\n      // Style fro the address check button\n      'float': 'right'\n    },\n    saveAddressForm: {\n      //Style for the save address form \n      width: '60%',\n      'padding': '20px',\n      textAlign: 'left'\n    },\n    selectField: {\n      //Style for the select field\n      width: '100%'\n    },\n    formControl: {\n      //Style for the formcontrol\n      width: '200px'\n    },\n    formButton: {\n      // Style for the button in the form\n      'font-weight': 400,\n      'width': '150px'\n    },\n    cardContent: {\n      //Style for the Order summary card content \n      'padding-top': '0px',\n      'margin-left': '10px',\n      'margin-right': '10px'\n    },\n    summaryHeader: {\n      //Style for the summary heading \n      'margin-left': '10px',\n      'margin-right': '10px'\n    },\n    restaurantName: {\n      //Style for the restaurant name\n      'font-size': '18px',\n      'color': 'rgb(85,85,85)',\n      margin: '10px 0px 10px 0px'\n    },\n    menuItemName: {\n      //Style for the menu item in the summary card\n      'margin-left': '10px',\n      color: 'grey'\n    },\n    itemQuantity: {\n      // Style for the Item quantity \n      'margin-left': 'auto',\n      'margin-right': '30px',\n      color: 'grey'\n    },\n    placeOrderButton: {\n      //Style for the Place order button in the order card\n      'font-weight': '400'\n    },\n    divider: {\n      //Style for the divider \n      'margin': '10px 0px'\n    },\n    couponInput: {\n      // Style for the input coupon\n      'width': '200px',\n      '@media(min-width:1300px)': {\n        width: '250px'\n      },\n      '@media(max-width:600px)': {\n        width: '200px'\n      }\n    },\n    applyButton: {\n      //Style for the apply button\n      height: '40px'\n    }\n  };\n}; // Custom component created for the use in the tab\n\n\nvar TabContainer = function TabContainer(props) {\n  return /*#__PURE__*/React.createElement(Typography, {\n    className: props.className,\n    component: \"div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nTabContainer.propTypes = {\n  children: PropTypes.node.isRequired\n}; // Creating Checkout  class component to render the Checkout page as per the design\n\nvar Checkout = /*#__PURE__*/function (_Component) {\n  _inherits(Checkout, _Component);\n\n  var _super = _createSuper(Checkout);\n\n  function Checkout(props) {\n    var _this;\n\n    _classCallCheck(this, Checkout);\n\n    _this = _super.call(this, props);\n\n    _this.getSteps = function () {\n      return ['Delivery', 'Payment'];\n    };\n\n    _this.nextButtonClickHandler = function () {\n      if (_this.state.value === 0) {\n        if (_this.state.selectedAddress !== \"\") {\n          var activeStep = _this.state.activeStep;\n          activeStep++;\n\n          _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n            activeStep: activeStep\n          }));\n        } else {\n          _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n            snackBarOpen: true,\n            snackBarMessage: \"Select Address\"\n          }));\n        }\n      }\n\n      if (_this.state.activeStep === 1) {\n        if (_this.state.selectedPayment === \"\") {\n          var _activeStep = _this.state.activeStep;\n\n          _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n            activeStep: _activeStep,\n            snackBarOpen: true,\n            snackBarMessage: \"Select Payment\"\n          }));\n        }\n      }\n    };\n\n    _this.backButtonClickHandler = function () {\n      var activeStep = _this.state.activeStep;\n      activeStep--;\n\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        activeStep: activeStep\n      }));\n    };\n\n    _this.changeButtonClickHandler = function () {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        activeStep: 0\n      }));\n    };\n\n    _this.getAllAddress = function () {\n      var data = null;\n\n      var that = _assertThisInitialized(_this);\n\n      var xhrAddress = new XMLHttpRequest();\n      xhrAddress.addEventListener('readystatechange', function () {\n        if (xhrAddress.readyState === 4 && xhrAddress.status === 200) {\n          var responseAddresses = JSON.parse(xhrAddress.responseText).addresses;\n          var addresses = [];\n          responseAddresses.forEach(function (responseAddress) {\n            var address = {\n              id: responseAddress.id,\n              city: responseAddress.city,\n              flatBuildingName: responseAddress.flat_building_name,\n              locality: responseAddress.locality,\n              pincode: responseAddress.pincode,\n              state: responseAddress.state,\n              selected: false\n            };\n            addresses.push(address);\n          });\n          that.setState(_objectSpread(_objectSpread({}, that.state), {}, {\n            addresses: addresses\n          }));\n        }\n      });\n      xhrAddress.open('GET', _this.props.baseUrl + 'address/customer');\n      xhrAddress.setRequestHeader('authorization', 'Bearer ' + _this.state.accessToken);\n      xhrAddress.send(data);\n    };\n\n    _this.getGridListColumn = function () {\n      if (window.innerWidth <= 600) {\n        _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n          noOfColumn: 2\n        }));\n      } else {\n        _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n          noOfColumn: 3\n        }));\n      }\n    };\n\n    _this.tabsChangeHandler = function (event, value) {\n      _this.setState({\n        value\n      });\n    };\n\n    _this.radioChangeHandler = function (event) {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        selectedPayment: event.target.value\n      }));\n    };\n\n    _this.saveAddressClickHandler = function () {\n      if (_this.saveAddressFormValid()) {\n        //checking the form validity is right only then the api call is made\n        var newAddressData = JSON.stringify({\n          //Creating data of address to be sent to the end point.\n          \"city\": _this.state.city,\n          \"flat_building_name\": _this.state.flatBuildingName,\n          \"locality\": _this.state.locality,\n          \"pincode\": _this.state.pincode,\n          \"state_uuid\": _this.state.selectedState\n        });\n        var xhrSaveAddress = new XMLHttpRequest();\n\n        var that = _assertThisInitialized(_this);\n\n        xhrSaveAddress.addEventListener(\"readystatechange\", function () {\n          if (xhrSaveAddress.readyState === 4 && xhrSaveAddress.status === 201) {\n            that.setState(_objectSpread(_objectSpread({}, that.state), {}, {\n              value: 0\n            }));\n            that.getAllAddress(); //Updating the page by calling get all address\n          }\n        });\n        xhrSaveAddress.open('POST', _this.props.baseUrl + 'address');\n        xhrSaveAddress.setRequestHeader('authorization', 'Bearer ' + _this.state.accessToken);\n        xhrSaveAddress.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhrSaveAddress.send(newAddressData);\n      }\n    };\n\n    _this.saveAddressFormValid = function () {\n      var flatBuildingNameRequired = \"dispNone\";\n      var cityRequired = \"dispNone\";\n      var localityRequired = \"dispNone\";\n      var stateRequired = \"dispNone\";\n      var pincodeRequired = \"dispNone\";\n      var pincodeHelpText = \"dispNone\";\n      var saveAddressFormValid = true;\n\n      if (_this.state.flatBuildingName === \"\") {\n        //checking if the flatBuildingName is not empty\n        flatBuildingNameRequired = \"dispBlock\";\n        saveAddressFormValid = false;\n      }\n\n      if (_this.state.locality === \"\") {\n        //checking if the locality is not empty\n        localityRequired = \"dispBlock\";\n        saveAddressFormValid = false;\n      }\n\n      if (_this.state.selectedState === \"\") {\n        //checking if the selectedState is not empty\n        stateRequired = \"dispBlock\";\n        saveAddressFormValid = false;\n      }\n\n      if (_this.state.city === \"\") {\n        //checking if the city is not empty\n        cityRequired = \"dispBlock\";\n        saveAddressFormValid = false;\n      }\n\n      if (_this.state.pincode === \"\") {\n        //checking if the pincode is not empty\n        pincodeRequired = \"dispBlock\";\n        saveAddressFormValid = false;\n      }\n\n      if (_this.state.pincode !== \"\") {\n        var pincodePattern = /^\\d{6}$/;\n\n        if (!_this.state.pincode.match(pincodePattern)) {\n          //checking the format of the pincode\n          pincodeHelpText = \"dispBlock\";\n          saveAddressFormValid = false;\n        }\n      }\n\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        flatBuildingNameRequired: flatBuildingNameRequired,\n        cityRequired: cityRequired,\n        localityRequired: localityRequired,\n        stateRequired: stateRequired,\n        pincodeRequired: pincodeRequired,\n        pincodeHelpText: pincodeHelpText\n      }));\n\n      return saveAddressFormValid;\n    };\n\n    _this.inputFlatBuildingNameChangeHandler = function (event) {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        flatBuildingName: event.target.value\n      }));\n    };\n\n    _this.inputLocalityChangeHandler = function (event) {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        locality: event.target.value\n      }));\n    };\n\n    _this.inputCityChangeHandler = function (event) {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        city: event.target.value\n      }));\n    };\n\n    _this.selectSelectedStateChangeHandler = function (event) {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        selectedState: event.target.value\n      }));\n    };\n\n    _this.inputPincodeChangeHandler = function (event) {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        pincode: event.target.value\n      }));\n    };\n\n    _this.inputCouponNameChangeHandler = function (event) {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        couponName: event.target.value\n      }));\n    };\n\n    _this.applyButtonClickHandler = function () {\n      var isCouponNameValid = true;\n      var couponNameRequired = \"dispNone\";\n      var couponNameHelpText = \"dispNone\";\n\n      if (_this.state.couponName === \"\") {\n        isCouponNameValid = false;\n        couponNameRequired = \"dispBlock\";\n\n        _this.setState({\n          couponNameRequired: couponNameRequired,\n          couponNameHelpText: couponNameHelpText\n        });\n      } //Api is called only when the data entered is right.\n\n\n      if (isCouponNameValid) {\n        var couponData = null;\n\n        var that = _assertThisInitialized(_this);\n\n        var xhrCoupon = new XMLHttpRequest();\n        xhrCoupon.addEventListener(\"readystatechange\", function () {\n          if (xhrCoupon.readyState === 4) {\n            if (xhrCoupon.status === 200) {\n              var coupon = JSON.parse(xhrCoupon.responseText);\n              that.setState(_objectSpread(_objectSpread({}, that.state), {}, {\n                coupon: coupon\n              }));\n            } else {\n              that.setState(_objectSpread(_objectSpread({}, that.state), {}, {\n                couponNameHelpText: \"dispBlock\",\n                couponNameRequired: \"dispNone\"\n              }));\n            }\n          }\n        });\n        xhrCoupon.open('GET', _this.props.baseUrl + '/order/coupon/' + _this.state.couponName);\n        xhrCoupon.setRequestHeader('authorization', 'Bearer ' + _this.state.accessToken);\n        xhrCoupon.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhrCoupon.setRequestHeader(\"Cache-Control\", \"no-cache\");\n        xhrCoupon.send(couponData);\n      }\n    };\n\n    _this.placeOrderButtonClickHandler = function () {\n      var item_quantities = [];\n\n      _this.state.cartItems.forEach(function (cartItem) {\n        item_quantities.push({\n          'item_id': cartItem.id,\n          'price': cartItem.totalAmount,\n          'quantity': cartItem.quantity\n        });\n      });\n\n      var newOrderData = JSON.stringify({\n        //Creating the data as required.\n        \"address_id\": _this.state.selectedAddress,\n        \"bill\": Math.floor(Math.random() * 100),\n        \"coupon_id\": _this.state.coupon !== null ? _this.state.coupon.id : \"\",\n        \"discount\": _this.getDiscountAmount(),\n        \"item_quantities\": item_quantities,\n        \"payment_id\": _this.state.selectedPayment,\n        \"restaurant_id\": _this.state.restaurantDetails.id\n      });\n\n      var that = _assertThisInitialized(_this);\n\n      var xhrOrder = new XMLHttpRequest();\n      xhrOrder.addEventListener(\"readystatechange\", function () {\n        if (xhrOrder.readyState === 4) {\n          if (xhrOrder.status === 201) {\n            var responseOrder = JSON.parse(xhrOrder.responseText);\n            that.setState(_objectSpread(_objectSpread({}, that.state), {}, {\n              snackBarOpen: true,\n              snackBarMessage: \"Order placed successfully! Your order ID is \" + responseOrder.id\n            }));\n          } else {\n            that.setState(_objectSpread(_objectSpread({}, that.state), {}, {\n              snackBarOpen: true,\n              snackBarMessage: \"Unable to place your order! Please try again!\"\n            }));\n          }\n        }\n      });\n      xhrOrder.open('POST', _this.props.baseUrl + 'order');\n      xhrOrder.setRequestHeader('authorization', 'Bearer ' + _this.state.accessToken);\n      xhrOrder.setRequestHeader('Content-Type', 'application/json');\n      xhrOrder.send(newOrderData);\n    };\n\n    _this.addressSelectedClickHandler = function (addressId) {\n      var addresses = _this.state.addresses;\n      var selectedAddress = \"\";\n      addresses.forEach(function (address) {\n        if (address.id === addressId) {\n          address.selected = true;\n          selectedAddress = address.id;\n        } else {\n          address.selected = false;\n        }\n      });\n\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        addresses: addresses,\n        selectedAddress: selectedAddress\n      }));\n    };\n\n    _this.getSubTotal = function () {\n      var subTotal = 0;\n\n      _this.state.cartItems.forEach(function (cartItem) {\n        subTotal = subTotal + cartItem.totalAmount;\n      });\n\n      return subTotal;\n    };\n\n    _this.getDiscountAmount = function () {\n      var discountAmount = 0;\n\n      if (_this.state.coupon !== null) {\n        discountAmount = _this.getSubTotal() * _this.state.coupon.percent / 100;\n        return discountAmount;\n      }\n\n      return discountAmount;\n    };\n\n    _this.getNetAmount = function () {\n      var netAmount = _this.getSubTotal() - _this.getDiscountAmount();\n\n      return netAmount;\n    };\n\n    _this.snackBarClose = function (event, reason) {\n      if (reason === 'clickaway') {\n        return;\n      }\n\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        snackBarMessage: \"\",\n        snackBarOpen: false\n      }));\n    };\n\n    _this.redirectToHome = function () {\n      if (!_this.state.isLoggedIn) {\n        return /*#__PURE__*/React.createElement(Redirect, {\n          to: \"/\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 650,\n            columnNumber: 20\n          }\n        });\n      }\n    };\n\n    _this.logoutRedirectToHome = function () {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        isLoggedIn: false\n      }));\n    };\n\n    _this.state = {\n      activeStep: 0,\n      steps: _this.getSteps(),\n      value: 0,\n      accessToken: sessionStorage.getItem('access-token'),\n      addresses: [],\n      selectedAddress: \"\",\n      flatBuildingName: \"\",\n      flatBuildingNameRequired: \"dispNone\",\n      locality: \"\",\n      localityRequired: \"dispNone\",\n      city: \"\",\n      cityRequired: \"dispNone\",\n      selectedState: \"\",\n      stateRequired: \"dispNone\",\n      pincode: \"\",\n      pincodeRequired: \"dispNone\",\n      pincodeHelpText: \"dispNone\",\n      states: [],\n      selectedPayment: \"\",\n      payment: [],\n      cartItems: props.location.cartItems ? props.location.cartItems : [],\n      //Setting state with details passed from the previous page\n      restaurantDetails: props.location.restaurantDetails ? props.location.restaurantDetails : {\n        name: null\n      },\n      //Setting state with details passed from the previous page\n      coupon: null,\n      couponName: \"\",\n      couponNameRequired: \"dispNone\",\n      couponNameHelpText: \"dispNone\",\n      snackBarOpen: false,\n      snackBarMessage: \"\",\n      transition: Fade,\n      noOfColumn: 3,\n      isLoggedIn: sessionStorage.getItem('access-token') === null ? false : true\n    };\n    return _this;\n  } //This method is called to get the array of steps name.\n\n\n  _createClass(Checkout, [{\n    key: \"componentDidMount\",\n    //This method is called when the components are mounted and in turn calls the api.\n    //This method call get all address,get all states and get all payment endpoints.\n    //Then re-renders the page with the data received from the api\n    value: function componentDidMount() {\n      if (this.state.isLoggedIn) {\n        //Calling getAllAddress function to get all the address of the customer.\n        this.getAllAddress(); //API call to get all states \n\n        var statesData = null;\n        var xhrStates = new XMLHttpRequest();\n        var that = this;\n        xhrStates.addEventListener(\"readystatechange\", function () {\n          if (xhrStates.readyState === 4 && xhrStates.status === 200) {\n            var states = JSON.parse(xhrStates.responseText).states;\n            that.setState(_objectSpread(_objectSpread({}, that.state), {}, {\n              states: states\n            }));\n          }\n        });\n        xhrStates.open('GET', this.props.baseUrl + 'states');\n        xhrStates.send(statesData); //API call to get all payment methods \n\n        var paymentData = null;\n        var xhrPayment = new XMLHttpRequest();\n        xhrPayment.addEventListener(\"readystatechange\", function () {\n          if (xhrPayment.readyState === 4 && xhrPayment.status === 200) {\n            var payment = JSON.parse(xhrPayment.responseText).paymentMethods;\n            that.setState(_objectSpread(_objectSpread({}, that.state), {}, {\n              payment: payment\n            }));\n          }\n        });\n        xhrPayment.open('GET', this.props.baseUrl + 'payment');\n        xhrPayment.send(paymentData);\n        window.addEventListener('resize', this.getGridListColumn); //Adding a event listening on the  to change the no of columns for the grid.\n      }\n    } //This Method will be called when the components are unmounted so as to withdraw all the asynchronous function running. \n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.updateCardsGridListCols); // Removing event listener.\n    } // This method is called when the save address button is clicked from the address form \n    //This method uses save address endpoint and sends the data as required by the endpoint to be persisted in the data base.\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var classes = this.props.classes;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 665,\n          columnNumber: 13\n        }\n      }, this.redirectToHome()\n      /*This method is called to check if logged in or not else redirected to home.*/\n      , /*#__PURE__*/React.createElement(Header, {\n        baseUrl: this.props.baseUrl,\n        showHeaderSearchBox: false,\n        logoutRedirect: this.logoutRedirectToHome,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 669,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"checkout-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"stepper-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Stepper, {\n        activeStep: this.state.activeStep,\n        orientation: \"vertical\",\n        className: classes.stepper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 25\n        }\n      }, this.state.steps.map(function (label, index) {\n        return (\n          /*#__PURE__*/\n          //Iteration over each step to create a stepper\n          React.createElement(Step, {\n            key: label,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 674,\n              columnNumber: 33\n            }\n          }, /*#__PURE__*/React.createElement(StepLabel, {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 675,\n              columnNumber: 37\n            }\n          }, label), /*#__PURE__*/React.createElement(StepContent, {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 676,\n              columnNumber: 37\n            }\n          }, index === 0 ? /*#__PURE__*/React.createElement(\"div\", {\n            className: \"address-container\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 678,\n              columnNumber: 45\n            }\n          }, /*#__PURE__*/React.createElement(Tabs, {\n            className: \"address-tabs\",\n            value: _this2.state.value,\n            onChange: _this2.tabsChangeHandler,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 679,\n              columnNumber: 49\n            }\n          }, /*#__PURE__*/React.createElement(Tab, {\n            label: \"EXISTING ADDRESS\",\n            className: classes.tab,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 680,\n              columnNumber: 53\n            }\n          }), /*#__PURE__*/React.createElement(Tab, {\n            label: \"NEW ADDRESS\",\n            className: classes.tab,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 681,\n              columnNumber: 53\n            }\n          })), _this2.state.value === 0 &&\n          /*#__PURE__*/\n          //Based on the value showing the tab value = 0 for existing address\n          React.createElement(TabContainer, {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 684,\n              columnNumber: 53\n            }\n          }, _this2.state.addresses.length !== 0 ? /*#__PURE__*/React.createElement(GridList, {\n            className: classes.gridList,\n            cols: _this2.state.noOfColumn,\n            spacing: 2,\n            cellHeight: \"auto\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 686,\n              columnNumber: 61\n            }\n          }, _this2.state.addresses.map(function (address) {\n            return /*#__PURE__*/React.createElement(GridListTile, {\n              className: classes.gridListTile,\n              key: address.id,\n              style: {\n                borderColor: address.selected ? \"rgb(224,37,96)\" : \"white\"\n              },\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 688,\n                columnNumber: 69\n              }\n            }, /*#__PURE__*/React.createElement(\"div\", {\n              className: \"grid-list-tile-container\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 689,\n                columnNumber: 73\n              }\n            }, /*#__PURE__*/React.createElement(Typography, {\n              variant: \"body1\",\n              component: \"p\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 690,\n                columnNumber: 77\n              }\n            }, address.flatBuildingName), /*#__PURE__*/React.createElement(Typography, {\n              variant: \"body1\",\n              component: \"p\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 691,\n                columnNumber: 77\n              }\n            }, address.locality), /*#__PURE__*/React.createElement(Typography, {\n              variant: \"body1\",\n              component: \"p\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 692,\n                columnNumber: 77\n              }\n            }, address.city), /*#__PURE__*/React.createElement(Typography, {\n              variant: \"body1\",\n              component: \"p\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 693,\n                columnNumber: 77\n              }\n            }, address.state.state_name), /*#__PURE__*/React.createElement(Typography, {\n              variant: \"body1\",\n              component: \"p\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 694,\n                columnNumber: 77\n              }\n            }, address.pincode), /*#__PURE__*/React.createElement(IconButton, {\n              className: classes.addressCheckButton,\n              onClick: function onClick() {\n                return _this2.addressSelectedClickHandler(address.id);\n              },\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 695,\n                columnNumber: 77\n              }\n            }, /*#__PURE__*/React.createElement(CheckCircleIcon, {\n              style: {\n                color: address.selected ? \"green\" : \"grey\"\n              },\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 696,\n                columnNumber: 81\n              }\n            }))));\n          })) : /*#__PURE__*/React.createElement(Typography, {\n            variant: \"body1\",\n            component: \"p\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 703,\n              columnNumber: 61\n            }\n          }, \"There are no saved addresses! You can save an address using the 'New Address' tab or using your \\u2018Profile\\u2019 menu option.\")), _this2.state.value === 1 &&\n          /*#__PURE__*/\n          //Value = 1 for save address tab\n          React.createElement(TabContainer, {\n            className: classes.saveAddressForm,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 708,\n              columnNumber: 53\n            }\n          }, /*#__PURE__*/React.createElement(FormControl, {\n            required: true,\n            className: classes.formControl,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 709,\n              columnNumber: 57\n            }\n          }, /*#__PURE__*/React.createElement(InputLabel, {\n            htmlFor: \"flat-building-name\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 710,\n              columnNumber: 61\n            }\n          }, \"Flat / Building No.\"), /*#__PURE__*/React.createElement(Input, {\n            id: \"flat-building-name\",\n            className: \"input-fields\",\n            flatbuildingname: _this2.state.flatBuildingName,\n            fullWidth: true,\n            onChange: _this2.inputFlatBuildingNameChangeHandler,\n            value: _this2.state.flatBuildingName,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 711,\n              columnNumber: 61\n            }\n          }), /*#__PURE__*/React.createElement(FormHelperText, {\n            className: _this2.state.flatBuildingNameRequired,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 712,\n              columnNumber: 61\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"red\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 713,\n              columnNumber: 65\n            }\n          }, \"required\"))), /*#__PURE__*/React.createElement(\"br\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 716,\n              columnNumber: 57\n            }\n          }), /*#__PURE__*/React.createElement(\"br\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 717,\n              columnNumber: 57\n            }\n          }), /*#__PURE__*/React.createElement(FormControl, {\n            className: classes.formControl,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 718,\n              columnNumber: 57\n            }\n          }, /*#__PURE__*/React.createElement(InputLabel, {\n            htmlFor: \"locality\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 719,\n              columnNumber: 61\n            }\n          }, \"Locality\"), /*#__PURE__*/React.createElement(Input, {\n            id: \"locality\",\n            className: \"input-fields\",\n            locality: _this2.state.locality,\n            fullWidth: true,\n            onChange: _this2.inputLocalityChangeHandler,\n            value: _this2.state.locality,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 720,\n              columnNumber: 61\n            }\n          }), /*#__PURE__*/React.createElement(FormHelperText, {\n            className: _this2.state.localityRequired,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 721,\n              columnNumber: 61\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"red\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 722,\n              columnNumber: 65\n            }\n          }, \"required\"))), /*#__PURE__*/React.createElement(\"br\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 725,\n              columnNumber: 57\n            }\n          }), /*#__PURE__*/React.createElement(\"br\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 726,\n              columnNumber: 57\n            }\n          }), /*#__PURE__*/React.createElement(FormControl, {\n            required: true,\n            className: classes.formControl,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 727,\n              columnNumber: 57\n            }\n          }, /*#__PURE__*/React.createElement(InputLabel, {\n            htmlFor: \"city\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 728,\n              columnNumber: 61\n            }\n          }, \"City\"), /*#__PURE__*/React.createElement(Input, {\n            id: \"city\",\n            className: \"input-fields\",\n            type: \"text\",\n            city: _this2.state.city,\n            fullWidth: true,\n            onChange: _this2.inputCityChangeHandler,\n            value: _this2.state.city,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 729,\n              columnNumber: 61\n            }\n          }), /*#__PURE__*/React.createElement(FormHelperText, {\n            className: _this2.state.cityRequired,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 730,\n              columnNumber: 61\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"red\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 731,\n              columnNumber: 65\n            }\n          }, \"required\"))), /*#__PURE__*/React.createElement(\"br\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 734,\n              columnNumber: 57\n            }\n          }), /*#__PURE__*/React.createElement(\"br\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 735,\n              columnNumber: 57\n            }\n          }), /*#__PURE__*/React.createElement(FormControl, {\n            required: true,\n            className: classes.formControl,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 736,\n              columnNumber: 57\n            }\n          }, /*#__PURE__*/React.createElement(InputLabel, {\n            htmlFor: \"state\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 737,\n              columnNumber: 61\n            }\n          }, \"State\"), /*#__PURE__*/React.createElement(Select, {\n            id: \"state\",\n            className: classes.selectField,\n            state: _this2.state.selectedState,\n            onChange: _this2.selectSelectedStateChangeHandler,\n            MenuProps: {\n              style: {\n                marginTop: '50px',\n                maxHeight: '300px'\n              }\n            },\n            value: _this2.state.selectedState,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 738,\n              columnNumber: 61\n            }\n          }, _this2.state.states.map(function (state) {\n            return /*#__PURE__*/React.createElement(MenuItem, {\n              value: state.id,\n              key: state.id,\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 740,\n                columnNumber: 69\n              }\n            }, state.state_name);\n          })), /*#__PURE__*/React.createElement(FormHelperText, {\n            className: _this2.state.stateRequired,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 743,\n              columnNumber: 61\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"red\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 744,\n              columnNumber: 65\n            }\n          }, \"required\"))), /*#__PURE__*/React.createElement(\"br\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 747,\n              columnNumber: 57\n            }\n          }), /*#__PURE__*/React.createElement(\"br\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 748,\n              columnNumber: 57\n            }\n          }), /*#__PURE__*/React.createElement(FormControl, {\n            required: true,\n            className: classes.formControl,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 749,\n              columnNumber: 57\n            }\n          }, /*#__PURE__*/React.createElement(InputLabel, {\n            htmlFor: \"pincode\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 750,\n              columnNumber: 61\n            }\n          }, \"Pincode\"), /*#__PURE__*/React.createElement(Input, {\n            id: \"pincode\",\n            className: \"input-fields\",\n            pincode: _this2.state.pincode,\n            fullWidth: true,\n            onChange: _this2.inputPincodeChangeHandler,\n            value: _this2.state.pincode,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 751,\n              columnNumber: 61\n            }\n          }), /*#__PURE__*/React.createElement(FormHelperText, {\n            className: _this2.state.pincodeRequired,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 752,\n              columnNumber: 61\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"red\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 753,\n              columnNumber: 65\n            }\n          }, \"required\")), /*#__PURE__*/React.createElement(FormHelperText, {\n            className: _this2.state.pincodeHelpText,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 755,\n              columnNumber: 61\n            }\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"red\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 756,\n              columnNumber: 65\n            }\n          }, \"Pincode must contain only numbers and must be 6 digits long\"))), /*#__PURE__*/React.createElement(\"br\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 759,\n              columnNumber: 57\n            }\n          }), /*#__PURE__*/React.createElement(\"br\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 760,\n              columnNumber: 57\n            }\n          }), /*#__PURE__*/React.createElement(\"br\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 761,\n              columnNumber: 57\n            }\n          }), /*#__PURE__*/React.createElement(Button, {\n            variant: \"contained\",\n            className: classes.formButton,\n            color: \"secondary\",\n            onClick: _this2.saveAddressClickHandler,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 762,\n              columnNumber: 57\n            }\n          }, \"SAVE ADDRESS\"))) : /*#__PURE__*/React.createElement(\"div\", {\n            className: \"payment-container\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 767,\n              columnNumber: 45\n            }\n          }, /*#__PURE__*/React.createElement(FormControl, {\n            component: \"fieldset\",\n            className: classes.radioFormControl,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 768,\n              columnNumber: 49\n            }\n          }, /*#__PURE__*/React.createElement(FormLabel, {\n            component: \"legend\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 769,\n              columnNumber: 53\n            }\n          }, \"Select Mode of Payment\"), /*#__PURE__*/React.createElement(RadioGroup, {\n            \"aria-label\": \"payment\",\n            name: \"payment\",\n            value: _this2.state.selectedPayment,\n            onChange: _this2.radioChangeHandler,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 772,\n              columnNumber: 53\n            }\n          }, _this2.state.payment.map(function (payment) {\n            return /*#__PURE__*/React.createElement(FormControlLabel, {\n              key: payment.id,\n              value: payment.id,\n              control: /*#__PURE__*/React.createElement(Radio, {\n                __self: _this2,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 774,\n                  columnNumber: 124\n                }\n              }),\n              label: payment.payment_name,\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 774,\n                columnNumber: 61\n              }\n            });\n          })))), /*#__PURE__*/React.createElement(\"div\", {\n            className: classes.actionsContainer,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 783,\n              columnNumber: 41\n            }\n          }, /*#__PURE__*/React.createElement(\"div\", {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 784,\n              columnNumber: 45\n            }\n          }, /*#__PURE__*/React.createElement(Button, {\n            disabled: _this2.state.activeStep === 0,\n            onClick: _this2.backButtonClickHandler,\n            className: classes.button,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 785,\n              columnNumber: 49\n            }\n          }, \"Back\"), /*#__PURE__*/React.createElement(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: _this2.nextButtonClickHandler,\n            className: classes.button,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 792,\n              columnNumber: 49\n            }\n          }, _this2.state.activeStep === _this2.state.steps.length - 1 ? 'Finish' : 'Next')))))\n        );\n      })), this.state.activeStep === this.state.steps.length && /*#__PURE__*/React.createElement(Paper, {\n        square: true,\n        elevation: 0,\n        className: classes.resetContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 807,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 808,\n          columnNumber: 33\n        }\n      }, \"View the summary and place your order now!\"), /*#__PURE__*/React.createElement(Button, {\n        onClick: this.changeButtonClickHandler,\n        className: classes.button,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 809,\n          columnNumber: 33\n        }\n      }, \"Change\"))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"summary-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 816,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        className: classes.summary,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 817,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(CardHeader, {\n        title: \"Summary\",\n        titleTypographyProps: {\n          variant: 'h5'\n        },\n        className: classes.summaryHeader,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 818,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(CardContent, {\n        className: classes.cardContent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 825,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        variant: \"subtitle1\",\n        component: \"p\",\n        className: classes.restaurantName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 826,\n          columnNumber: 33\n        }\n      }, this.state.restaurantDetails.name), this.state.cartItems.map(function (cartItem) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"menu-item-container\",\n          key: cartItem.id,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 828,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(\"i\", {\n          className: \"fa fa-stop-circle-o\",\n          \"aria-hidden\": \"true\",\n          style: {\n            color: cartItem.itemType === \"NON_VEG\" ? \"#BE4A47\" : \"#5A9A5B\"\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 829,\n            columnNumber: 41\n          }\n        }), /*#__PURE__*/React.createElement(Typography, {\n          variant: \"subtitle1\",\n          component: \"p\",\n          className: classes.menuItemName,\n          id: \"summary-menu-item-name\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 830,\n            columnNumber: 41\n          }\n        }, cartItem.name[0].toUpperCase() + cartItem.name.slice(1)), /*#__PURE__*/React.createElement(Typography, {\n          variant: \"subtitle1\",\n          component: \"p\",\n          className: classes.itemQuantity,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 831,\n            columnNumber: 41\n          }\n        }, cartItem.quantity), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"summary-item-price-container\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 832,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(\"i\", {\n          className: \"fa fa-inr\",\n          \"aria-hidden\": \"true\",\n          style: {\n            color: 'grey'\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 833,\n            columnNumber: 45\n          }\n        }), /*#__PURE__*/React.createElement(Typography, {\n          variant: \"subtitle1\",\n          component: \"p\",\n          className: classes.itemPrice,\n          id: \"summary-item-price\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 834,\n            columnNumber: 45\n          }\n        }, cartItem.totalAmount.toFixed(2))));\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"coupon-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 838,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        className: classes.formControlCoupon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 839,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"coupon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 840,\n          columnNumber: 41\n        }\n      }, \"Coupon Code\"), /*#__PURE__*/React.createElement(FilledInput, {\n        id: \"coupon\",\n        className: classes.couponInput,\n        value: this.state.couponName,\n        onChange: this.inputCouponNameChangeHandler,\n        placeholder: \"Ex: FLAT30\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 841,\n          columnNumber: 41\n        }\n      }), /*#__PURE__*/React.createElement(FormHelperText, {\n        className: this.state.couponNameRequired,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 842,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"red\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 843,\n          columnNumber: 45\n        }\n      }, \"required\")), /*#__PURE__*/React.createElement(FormHelperText, {\n        className: this.state.couponNameHelpText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 845,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"red\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 846,\n          columnNumber: 45\n        }\n      }, \"invalid coupon\"))), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"default\",\n        className: classes.applyButton,\n        onClick: this.applyButtonClickHandler,\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 849,\n          columnNumber: 37\n        }\n      }, \"APPLY\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"label-amount-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 851,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        variant: \"subtitle2\",\n        component: \"p\",\n        style: {\n          color: 'grey'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 852,\n          columnNumber: 37\n        }\n      }, \"Sub Total\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"amount\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 853,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fa fa-inr\",\n        \"aria-hidden\": \"true\",\n        style: {\n          color: 'grey'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 854,\n          columnNumber: 41\n        }\n      }), /*#__PURE__*/React.createElement(Typography, {\n        variant: \"subtitle1\",\n        component: \"p\",\n        style: {\n          color: 'grey'\n        },\n        id: \"summary-net-amount\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 855,\n          columnNumber: 41\n        }\n      }, this.getSubTotal().toFixed(2)))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"label-amount-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 858,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        variant: \"subtitle2\",\n        component: \"p\",\n        className: classes.netAmount,\n        style: {\n          color: 'grey'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 859,\n          columnNumber: 37\n        }\n      }, \"Discount\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"amount\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 860,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fa fa-inr\",\n        \"aria-hidden\": \"true\",\n        style: {\n          color: 'grey'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 861,\n          columnNumber: 41\n        }\n      }), /*#__PURE__*/React.createElement(Typography, {\n        variant: \"subtitle1\",\n        component: \"p\",\n        style: {\n          color: 'grey'\n        },\n        id: \"summary-net-amount\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 862,\n          columnNumber: 41\n        }\n      }, this.getDiscountAmount().toFixed(2)))), /*#__PURE__*/React.createElement(Divider, {\n        className: classes.divider,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 867,\n          columnNumber: 33\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"label-amount-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 868,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        variant: \"subtitle2\",\n        component: \"p\",\n        className: classes.netAmount,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 869,\n          columnNumber: 37\n        }\n      }, \"Net Amount\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"amount\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 870,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fa fa-inr\",\n        \"aria-hidden\": \"true\",\n        style: {\n          color: 'grey'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 871,\n          columnNumber: 41\n        }\n      }), /*#__PURE__*/React.createElement(Typography, {\n        variant: \"subtitle1\",\n        component: \"p\",\n        className: classes.itemPrice,\n        id: \"summary-net-amount\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 872,\n          columnNumber: 41\n        }\n      }, this.getNetAmount().toFixed(2)))), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        fullWidth: true,\n        className: classes.placeOrderButton,\n        onClick: this.placeOrderButtonClickHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 876,\n          columnNumber: 33\n        }\n      }, \"PLACE ORDER\"))))), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 883,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Snackbar, {\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'left'\n        },\n        open: this.state.snackBarOpen,\n        autoHideDuration: 4000,\n        onClose: this.snackBarClose,\n        TransitionComponent: this.state.transition,\n        ContentProps: {\n          'aria-describedby': 'message-id'\n        },\n        message: /*#__PURE__*/React.createElement(\"span\", {\n          id: \"message-id\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 896,\n            columnNumber: 34\n          }\n        }, this.state.snackBarMessage),\n        action: /*#__PURE__*/React.createElement(IconButton, {\n          color: \"inherit\",\n          onClick: this.snackBarClose,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 898,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(CloseIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 899,\n            columnNumber: 33\n          }\n        })),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 884,\n          columnNumber: 21\n        }\n      })));\n    }\n  }]);\n\n  return Checkout;\n}(Component);\n\nexport default withStyles(styles)(Checkout);","map":{"version":3,"sources":["/Users/pradeeph/Documents/Upgrad_FullStackDevelopment/Upgrad_Capstone_FrontEnd/food-ordering-app/src/screens/checkout/Checkout.js"],"names":["React","Component","Stepper","Step","StepLabel","StepContent","withStyles","Button","Tab","Tabs","IconButton","FormLabel","RadioGroup","FormControlLabel","Radio","Divider","Typography","Input","FormControl","InputLabel","FormHelperText","GridList","GridListTile","PropTypes","CheckCircleIcon","Paper","Select","MenuItem","Card","CardContent","CardHeader","FilledInput","Snackbar","Fade","CloseIcon","Redirect","Header","styles","theme","actionsContainer","marginBottom","spacing","button","marginTop","marginRight","stepper","resetContainer","padding","tab","width","gridList","flexWrap","transform","gridListTile","textAlign","margin","addressCheckButton","saveAddressForm","selectField","formControl","formButton","cardContent","summaryHeader","restaurantName","menuItemName","color","itemQuantity","placeOrderButton","divider","couponInput","applyButton","height","TabContainer","props","className","children","propTypes","node","isRequired","Checkout","getSteps","nextButtonClickHandler","state","value","selectedAddress","activeStep","setState","snackBarOpen","snackBarMessage","selectedPayment","backButtonClickHandler","changeButtonClickHandler","getAllAddress","data","that","xhrAddress","XMLHttpRequest","addEventListener","readyState","status","responseAddresses","JSON","parse","responseText","addresses","forEach","responseAddress","address","id","city","flatBuildingName","flat_building_name","locality","pincode","selected","push","open","baseUrl","setRequestHeader","accessToken","send","getGridListColumn","window","innerWidth","noOfColumn","tabsChangeHandler","event","radioChangeHandler","target","saveAddressClickHandler","saveAddressFormValid","newAddressData","stringify","selectedState","xhrSaveAddress","flatBuildingNameRequired","cityRequired","localityRequired","stateRequired","pincodeRequired","pincodeHelpText","pincodePattern","match","inputFlatBuildingNameChangeHandler","inputLocalityChangeHandler","inputCityChangeHandler","selectSelectedStateChangeHandler","inputPincodeChangeHandler","inputCouponNameChangeHandler","couponName","applyButtonClickHandler","isCouponNameValid","couponNameRequired","couponNameHelpText","couponData","xhrCoupon","coupon","placeOrderButtonClickHandler","item_quantities","cartItems","cartItem","totalAmount","quantity","newOrderData","Math","floor","random","getDiscountAmount","restaurantDetails","xhrOrder","responseOrder","addressSelectedClickHandler","addressId","getSubTotal","subTotal","discountAmount","percent","getNetAmount","netAmount","snackBarClose","reason","redirectToHome","isLoggedIn","logoutRedirectToHome","steps","sessionStorage","getItem","states","payment","location","name","transition","statesData","xhrStates","paymentData","xhrPayment","paymentMethods","removeEventListener","updateCardsGridListCols","classes","map","label","index","length","borderColor","state_name","style","maxHeight","radioFormControl","payment_name","summary","variant","itemType","toUpperCase","slice","itemPrice","toFixed","formControlCoupon","vertical","horizontal"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,GAA7B,EAAkCC,IAAlC,EAAwCC,UAAxC,EAAoDC,SAApD,EAA+DC,UAA/D,EAA2EC,gBAA3E,EAA6FC,KAA7F,EAAoGC,OAApG,QAAmH,mBAAnH;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,cAAlC,QAAwD,mBAAxD;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAO,uCAAP;AAIA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAO,0BAAP,C,CAEA;;AACA,IAAMC,MAAM,GAAI,SAAVA,MAAU,CAAAC,KAAK;AAAA,SAAK;AAEtBC,IAAAA,gBAAgB,EAAE;AAAE;AAChBC,MAAAA,YAAY,EAAEF,KAAK,CAACG,OAAN,CAAc,CAAd;AADA,KAFI;AAKtBC,IAAAA,MAAM,EAAE;AAAE;AACNC,MAAAA,SAAS,EAAEL,KAAK,CAACG,OAAN,CAAc,CAAd,CADP;AAEJG,MAAAA,WAAW,EAAEN,KAAK,CAACG,OAAN,CAAc,CAAd;AAFT,KALc;AAStBI,IAAAA,OAAO,EAAE;AAAE;AACP,qBAAe,KADV;AAEL,kCAA4B;AACxB,mBAAU;AADc;AAFvB,KATa;AAetBC,IAAAA,cAAc,EAAE;AAAE;AACdC,MAAAA,OAAO,EAAET,KAAK,CAACG,OAAN,CAAc,CAAd;AADG,KAfM;AAkBtBO,IAAAA,GAAG,EAAE;AAAE;AACH,qBAAe,GADd;AAED,kCAA4B;AACxBC,QAAAA,KAAK,EAAE;AADiB;AAF3B,KAlBiB;AAwBtBC,IAAAA,QAAQ,EAAE;AAAE;AACRC,MAAAA,QAAQ,EAAE,QADJ;AAEN;AACAC,MAAAA,SAAS,EAAE;AAHL,KAxBY;AA+BtBC,IAAAA,YAAY,EAAE;AAAE;AACZC,MAAAA,SAAS,EAAE,MADD;AAEVC,MAAAA,MAAM,EAAE,mBAFE;AAGV,sBAAgB,OAHN;AAIV,sBAAgB,qBAJN;AAKV,uBAAiB,MALP;AAMV,iBAAW;AAND,KA/BQ;AAuCtBC,IAAAA,kBAAkB,EAAE;AAAE;AAClB,eAAS;AADO,KAvCE;AA0CtBC,IAAAA,eAAe,EAAE;AAAE;AACfR,MAAAA,KAAK,EAAE,KADM;AAEb,iBAAW,MAFE;AAGbK,MAAAA,SAAS,EAAE;AAHE,KA1CK;AAgDtBI,IAAAA,WAAW,EAAE;AAAE;AACXT,MAAAA,KAAK,EAAE;AADE,KAhDS;AAmDtBU,IAAAA,WAAW,EAAE;AAAE;AACXV,MAAAA,KAAK,EAAE;AADE,KAnDS;AAsDtBW,IAAAA,UAAU,EAAE;AAAE;AACV,qBAAe,GADP;AAER,eAAS;AAFD,KAtDU;AA0DtBC,IAAAA,WAAW,EAAE;AAAE;AACX,qBAAe,KADN;AAET,qBAAe,MAFN;AAGT,sBAAgB;AAHP,KA1DS;AA+DtBC,IAAAA,aAAa,EAAE;AAAE;AACb,qBAAe,MADJ;AAEX,sBAAgB;AAFL,KA/DO;AAmEtBC,IAAAA,cAAc,EAAE;AAAE;AACd,mBAAa,MADD;AAEZ,eAAS,eAFG;AAGZR,MAAAA,MAAM,EAAE;AAHI,KAnEM;AAwEtBS,IAAAA,YAAY,EAAE;AAAE;AACZ,qBAAe,MADL;AAEVC,MAAAA,KAAK,EAAE;AAFG,KAxEQ;AA4EtBC,IAAAA,YAAY,EAAE;AAAE;AACZ,qBAAe,MADL;AAEV,sBAAe,MAFL;AAGVD,MAAAA,KAAK,EAAE;AAHG,KA5EQ;AAiFtBE,IAAAA,gBAAgB,EAAE;AAAE;AAChB,qBAAe;AADD,KAjFI;AAoFtBC,IAAAA,OAAO,EAAE;AAAE;AACP,gBAAU;AADL,KApFa;AAuFtBC,IAAAA,WAAW,EAAE;AAAC;AACV,eAAS,OADA;AAET,kCAA4B;AACxBpB,QAAAA,KAAK,EAAE;AADiB,OAFnB;AAKT,iCAA2B;AACvBA,QAAAA,KAAK,EAAE;AADgB;AALlB,KAvFS;AAgGtBqB,IAAAA,WAAW,EAAE;AAAE;AACXC,MAAAA,MAAM,EAAE;AADC;AAhGS,GAAL;AAAA,CAArB,C,CAsGA;;;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAUC,KAAV,EAAiB;AAClC,sBACI,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAEA,KAAK,CAACC,SAA7B;AAAwC,IAAA,SAAS,EAAC,KAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,KAAK,CAACE,QADX,CADJ;AAKH,CAND;;AAQAH,YAAY,CAACI,SAAb,GAAyB;AACrBD,EAAAA,QAAQ,EAAEpD,SAAS,CAACsD,IAAV,CAAeC;AADJ,CAAzB,C,CAIA;;IAEMC,Q;;;;;AACF,oBAAYN,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;;AADe,UAuCnBO,QAvCmB,GAuCR,YAAM;AACb,aAAO,CAAC,UAAD,EAAa,SAAb,CAAP;AACH,KAzCkB;;AAAA,UA6CnBC,sBA7CmB,GA6CM,YAAM;AAC3B,UAAI,MAAKC,KAAL,CAAWC,KAAX,KAAqB,CAAzB,EAA4B;AACxB,YAAI,MAAKD,KAAL,CAAWE,eAAX,KAA+B,EAAnC,EAAuC;AACnC,cAAIC,UAAU,GAAG,MAAKH,KAAL,CAAWG,UAA5B;AACAA,UAAAA,UAAU;;AACV,gBAAKC,QAAL,iCACO,MAAKJ,KADZ;AAEIG,YAAAA,UAAU,EAAEA;AAFhB;AAIH,SAPD,MAOO;AACH,gBAAKC,QAAL,iCACO,MAAKJ,KADZ;AAEIK,YAAAA,YAAY,EAAE,IAFlB;AAGIC,YAAAA,eAAe,EAAE;AAHrB;AAKH;AACJ;;AACD,UAAG,MAAKN,KAAL,CAAWG,UAAX,KAA0B,CAA7B,EAA+B;AAC3B,YAAG,MAAKH,KAAL,CAAWO,eAAX,KAA+B,EAAlC,EAAqC;AACjC,cAAIJ,WAAU,GAAG,MAAKH,KAAL,CAAWG,UAA5B;;AACA,gBAAKC,QAAL,iCACO,MAAKJ,KADZ;AAEIG,YAAAA,UAAU,EAACA,WAFf;AAGIE,YAAAA,YAAY,EAAE,IAHlB;AAIIC,YAAAA,eAAe,EAAC;AAJpB;AAMH;AACJ;AACJ,KAzEkB;;AAAA,UA4EnBE,sBA5EmB,GA4EM,YAAM;AAC3B,UAAIL,UAAU,GAAG,MAAKH,KAAL,CAAWG,UAA5B;AACAA,MAAAA,UAAU;;AACV,YAAKC,QAAL,iCACO,MAAKJ,KADZ;AAEIG,QAAAA,UAAU,EAAEA;AAFhB;AAIH,KAnFkB;;AAAA,UAsFnBM,wBAtFmB,GAsFQ,YAAM;AAC7B,YAAKL,QAAL,iCACO,MAAKJ,KADZ;AAEIG,QAAAA,UAAU,EAAE;AAFhB;AAIH,KA3FkB;;AAAA,UA8FnBO,aA9FmB,GA8FH,YAAM;AAClB,UAAIC,IAAI,GAAG,IAAX;;AACA,UAAIC,IAAI,gCAAR;;AACA,UAAIC,UAAU,GAAG,IAAIC,cAAJ,EAAjB;AAEAD,MAAAA,UAAU,CAACE,gBAAX,CAA4B,kBAA5B,EAAgD,YAAY;AACxD,YAAIF,UAAU,CAACG,UAAX,KAA0B,CAA1B,IAA+BH,UAAU,CAACI,MAAX,KAAsB,GAAzD,EAA8D;AAC1D,cAAIC,iBAAiB,GAAGC,IAAI,CAACC,KAAL,CAAWP,UAAU,CAACQ,YAAtB,EAAoCC,SAA5D;AACA,cAAIA,SAAS,GAAG,EAAhB;AACAJ,UAAAA,iBAAiB,CAACK,OAAlB,CAA0B,UAAAC,eAAe,EAAI;AACzC,gBAAIC,OAAO,GAAG;AACVC,cAAAA,EAAE,EAAEF,eAAe,CAACE,EADV;AAEVC,cAAAA,IAAI,EAAEH,eAAe,CAACG,IAFZ;AAGVC,cAAAA,gBAAgB,EAAEJ,eAAe,CAACK,kBAHxB;AAIVC,cAAAA,QAAQ,EAAEN,eAAe,CAACM,QAJhB;AAKVC,cAAAA,OAAO,EAAEP,eAAe,CAACO,OALf;AAMV/B,cAAAA,KAAK,EAAEwB,eAAe,CAACxB,KANb;AAOVgC,cAAAA,QAAQ,EAAE;AAPA,aAAd;AASAV,YAAAA,SAAS,CAACW,IAAV,CAAeR,OAAf;AACH,WAXD;AAYAb,UAAAA,IAAI,CAACR,QAAL,iCACOQ,IAAI,CAACZ,KADZ;AAEIsB,YAAAA,SAAS,EAAEA;AAFf;AAIH;AACJ,OArBD;AAuBAT,MAAAA,UAAU,CAACqB,IAAX,CAAgB,KAAhB,EAAuB,MAAK3C,KAAL,CAAW4C,OAAX,GAAqB,kBAA5C;AACAtB,MAAAA,UAAU,CAACuB,gBAAX,CAA4B,eAA5B,EAA6C,YAAY,MAAKpC,KAAL,CAAWqC,WAApE;AACAxB,MAAAA,UAAU,CAACyB,IAAX,CAAgB3B,IAAhB;AAEH,KA9HkB;;AAAA,UAiInB4B,iBAjImB,GAiIC,YAAM;AACtB,UAAIC,MAAM,CAACC,UAAP,IAAqB,GAAzB,EAA8B;AAC1B,cAAKrC,QAAL,iCACO,MAAKJ,KADZ;AAEI0C,UAAAA,UAAU,EAAE;AAFhB;AAIH,OALD,MAKK;AACD,cAAKtC,QAAL,iCACO,MAAKJ,KADZ;AAEI0C,UAAAA,UAAU,EAAE;AAFhB;AAIH;AACJ,KA7IkB;;AAAA,UAgJnBC,iBAhJmB,GAgJC,UAACC,KAAD,EAAQ3C,KAAR,EAAkB;AAClC,YAAKG,QAAL,CAAc;AACVH,QAAAA;AADU,OAAd;AAGH,KApJkB;;AAAA,UAuJnB4C,kBAvJmB,GAuJE,UAACD,KAAD,EAAW;AAC5B,YAAKxC,QAAL,iCACO,MAAKJ,KADZ;AAEIO,QAAAA,eAAe,EAAEqC,KAAK,CAACE,MAAN,CAAa7C;AAFlC;AAIH,KA5JkB;;AAAA,UAkNnB8C,uBAlNmB,GAkNO,YAAM;AAC5B,UAAI,MAAKC,oBAAL,EAAJ,EAAiC;AAAE;AAC/B,YAAIC,cAAc,GAAG9B,IAAI,CAAC+B,SAAL,CAAe;AAAE;AAClC,kBAAQ,MAAKlD,KAAL,CAAW2B,IADa;AAEhC,gCAAsB,MAAK3B,KAAL,CAAW4B,gBAFD;AAGhC,sBAAY,MAAK5B,KAAL,CAAW8B,QAHS;AAIhC,qBAAW,MAAK9B,KAAL,CAAW+B,OAJU;AAKhC,wBAAc,MAAK/B,KAAL,CAAWmD;AALO,SAAf,CAArB;AAQA,YAAIC,cAAc,GAAG,IAAItC,cAAJ,EAArB;;AACA,YAAIF,IAAI,gCAAR;;AAEAwC,QAAAA,cAAc,CAACrC,gBAAf,CAAgC,kBAAhC,EAAoD,YAAY;AAC5D,cAAIqC,cAAc,CAACpC,UAAf,KAA8B,CAA9B,IAAmCoC,cAAc,CAACnC,MAAf,KAA0B,GAAjE,EAAsE;AAClEL,YAAAA,IAAI,CAACR,QAAL,iCACOQ,IAAI,CAACZ,KADZ;AAEIC,cAAAA,KAAK,EAAE;AAFX;AAKAW,YAAAA,IAAI,CAACF,aAAL,GANkE,CAM5C;AACzB;AACJ,SATD;AAWA0C,QAAAA,cAAc,CAAClB,IAAf,CAAoB,MAApB,EAA4B,MAAK3C,KAAL,CAAW4C,OAAX,GAAqB,SAAjD;AACAiB,QAAAA,cAAc,CAAChB,gBAAf,CAAgC,eAAhC,EAAiD,YAAY,MAAKpC,KAAL,CAAWqC,WAAxE;AACAe,QAAAA,cAAc,CAAChB,gBAAf,CAAgC,cAAhC,EAAgD,kBAAhD;AACAgB,QAAAA,cAAc,CAACd,IAAf,CAAoBW,cAApB;AACH;AACJ,KA/OkB;;AAAA,UAmPnBD,oBAnPmB,GAmPI,YAAM;AACzB,UAAIK,wBAAwB,GAAG,UAA/B;AACA,UAAIC,YAAY,GAAG,UAAnB;AACA,UAAIC,gBAAgB,GAAG,UAAvB;AACA,UAAIC,aAAa,GAAG,UAApB;AACA,UAAIC,eAAe,GAAG,UAAtB;AACA,UAAIC,eAAe,GAAG,UAAtB;AACA,UAAIV,oBAAoB,GAAG,IAA3B;;AAEA,UAAI,MAAKhD,KAAL,CAAW4B,gBAAX,KAAgC,EAApC,EAAwC;AAAE;AACtCyB,QAAAA,wBAAwB,GAAG,WAA3B;AACAL,QAAAA,oBAAoB,GAAG,KAAvB;AACH;;AAED,UAAI,MAAKhD,KAAL,CAAW8B,QAAX,KAAwB,EAA5B,EAAgC;AAAE;AAC9ByB,QAAAA,gBAAgB,GAAG,WAAnB;AACAP,QAAAA,oBAAoB,GAAG,KAAvB;AACH;;AAED,UAAI,MAAKhD,KAAL,CAAWmD,aAAX,KAA6B,EAAjC,EAAqC;AAAE;AACnCK,QAAAA,aAAa,GAAG,WAAhB;AACAR,QAAAA,oBAAoB,GAAG,KAAvB;AACH;;AAED,UAAI,MAAKhD,KAAL,CAAW2B,IAAX,KAAoB,EAAxB,EAA4B;AAAE;AAC1B2B,QAAAA,YAAY,GAAG,WAAf;AACAN,QAAAA,oBAAoB,GAAG,KAAvB;AACH;;AAED,UAAI,MAAKhD,KAAL,CAAW+B,OAAX,KAAuB,EAA3B,EAA+B;AAAE;AAC7B0B,QAAAA,eAAe,GAAG,WAAlB;AACAT,QAAAA,oBAAoB,GAAG,KAAvB;AACH;;AACD,UAAI,MAAKhD,KAAL,CAAW+B,OAAX,KAAuB,EAA3B,EAA+B;AAC3B,YAAI4B,cAAc,GAAG,SAArB;;AACA,YAAI,CAAC,MAAK3D,KAAL,CAAW+B,OAAX,CAAmB6B,KAAnB,CAAyBD,cAAzB,CAAL,EAA+C;AAAG;AAC9CD,UAAAA,eAAe,GAAG,WAAlB;AACAV,UAAAA,oBAAoB,GAAG,KAAvB;AACH;AACJ;;AACD,YAAK5C,QAAL,iCACO,MAAKJ,KADZ;AAEIqD,QAAAA,wBAAwB,EAAEA,wBAF9B;AAGIC,QAAAA,YAAY,EAAEA,YAHlB;AAIIC,QAAAA,gBAAgB,EAAEA,gBAJtB;AAKIC,QAAAA,aAAa,EAAEA,aALnB;AAMIC,QAAAA,eAAe,EAAEA,eANrB;AAOIC,QAAAA,eAAe,EAAEA;AAPrB;;AAUA,aAAOV,oBAAP;AACH,KAtSkB;;AAAA,UAySnBa,kCAzSmB,GAySkB,UAACjB,KAAD,EAAW;AAC5C,YAAKxC,QAAL,iCACO,MAAKJ,KADZ;AAEI4B,QAAAA,gBAAgB,EAAEgB,KAAK,CAACE,MAAN,CAAa7C;AAFnC;AAIH,KA9SkB;;AAAA,UAiTnB6D,0BAjTmB,GAiTU,UAAClB,KAAD,EAAW;AACpC,YAAKxC,QAAL,iCACO,MAAKJ,KADZ;AAEI8B,QAAAA,QAAQ,EAAEc,KAAK,CAACE,MAAN,CAAa7C;AAF3B;AAIH,KAtTkB;;AAAA,UAyTnB8D,sBAzTmB,GAyTM,UAACnB,KAAD,EAAW;AAChC,YAAKxC,QAAL,iCACO,MAAKJ,KADZ;AAEI2B,QAAAA,IAAI,EAAEiB,KAAK,CAACE,MAAN,CAAa7C;AAFvB;AAIH,KA9TkB;;AAAA,UAiUnB+D,gCAjUmB,GAiUgB,UAACpB,KAAD,EAAW;AAC1C,YAAKxC,QAAL,iCACO,MAAKJ,KADZ;AAEImD,QAAAA,aAAa,EAAEP,KAAK,CAACE,MAAN,CAAa7C;AAFhC;AAIH,KAtUkB;;AAAA,UAyUnBgE,yBAzUmB,GAyUS,UAACrB,KAAD,EAAW;AACnC,YAAKxC,QAAL,iCACO,MAAKJ,KADZ;AAEI+B,QAAAA,OAAO,EAAEa,KAAK,CAACE,MAAN,CAAa7C;AAF1B;AAIH,KA9UkB;;AAAA,UAiVnBiE,4BAjVmB,GAiVY,UAACtB,KAAD,EAAW;AACtC,YAAKxC,QAAL,iCACO,MAAKJ,KADZ;AAEImE,QAAAA,UAAU,EAAEvB,KAAK,CAACE,MAAN,CAAa7C;AAF7B;AAIH,KAtVkB;;AAAA,UAyVnBmE,uBAzVmB,GAyVO,YAAM;AAC5B,UAAIC,iBAAiB,GAAG,IAAxB;AACA,UAAIC,kBAAkB,GAAG,UAAzB;AACA,UAAIC,kBAAkB,GAAG,UAAzB;;AACA,UAAI,MAAKvE,KAAL,CAAWmE,UAAX,KAA0B,EAA9B,EAAkC;AAC9BE,QAAAA,iBAAiB,GAAG,KAApB;AACAC,QAAAA,kBAAkB,GAAG,WAArB;;AACA,cAAKlE,QAAL,CAAc;AACVkE,UAAAA,kBAAkB,EAAEA,kBADV;AAEVC,UAAAA,kBAAkB,EAAEA;AAFV,SAAd;AAIH,OAX2B,CAa5B;;;AACA,UAAIF,iBAAJ,EAAuB;AACnB,YAAIG,UAAU,GAAG,IAAjB;;AACA,YAAI5D,IAAI,gCAAR;;AACA,YAAI6D,SAAS,GAAG,IAAI3D,cAAJ,EAAhB;AACA2D,QAAAA,SAAS,CAAC1D,gBAAV,CAA2B,kBAA3B,EAA+C,YAAY;AACvD,cAAI0D,SAAS,CAACzD,UAAV,KAAyB,CAA7B,EAAgC;AAC5B,gBAAIyD,SAAS,CAACxD,MAAV,KAAqB,GAAzB,EAA8B;AAC1B,kBAAIyD,MAAM,GAAGvD,IAAI,CAACC,KAAL,CAAWqD,SAAS,CAACpD,YAArB,CAAb;AACAT,cAAAA,IAAI,CAACR,QAAL,iCACOQ,IAAI,CAACZ,KADZ;AAEI0E,gBAAAA,MAAM,EAAEA;AAFZ;AAIH,aAND,MAMO;AACH9D,cAAAA,IAAI,CAACR,QAAL,iCACOQ,IAAI,CAACZ,KADZ;AAEIuE,gBAAAA,kBAAkB,EAAE,WAFxB;AAGID,gBAAAA,kBAAkB,EAAE;AAHxB;AAKH;AACJ;AACJ,SAhBD;AAkBAG,QAAAA,SAAS,CAACvC,IAAV,CAAe,KAAf,EAAsB,MAAK3C,KAAL,CAAW4C,OAAX,GAAqB,gBAArB,GAAwC,MAAKnC,KAAL,CAAWmE,UAAzE;AACAM,QAAAA,SAAS,CAACrC,gBAAV,CAA2B,eAA3B,EAA4C,YAAY,MAAKpC,KAAL,CAAWqC,WAAnE;AACAoC,QAAAA,SAAS,CAACrC,gBAAV,CAA2B,cAA3B,EAA2C,kBAA3C;AACAqC,QAAAA,SAAS,CAACrC,gBAAV,CAA2B,eAA3B,EAA4C,UAA5C;AACAqC,QAAAA,SAAS,CAACnC,IAAV,CAAekC,UAAf;AACH;AAEJ,KApYkB;;AAAA,UA0YnBG,4BA1YmB,GA0YY,YAAM;AACjC,UAAIC,eAAe,GAAG,EAAtB;;AACA,YAAK5E,KAAL,CAAW6E,SAAX,CAAqBtD,OAArB,CAA6B,UAAAuD,QAAQ,EAAI;AACrCF,QAAAA,eAAe,CAAC3C,IAAhB,CAAqB;AACjB,qBAAW6C,QAAQ,CAACpD,EADH;AAEjB,mBAASoD,QAAQ,CAACC,WAFD;AAGjB,sBAAYD,QAAQ,CAACE;AAHJ,SAArB;AAKH,OAND;;AAOA,UAAIC,YAAY,GAAG9D,IAAI,CAAC+B,SAAL,CAAe;AAAE;AAChC,sBAAc,MAAKlD,KAAL,CAAWE,eADK;AAE9B,gBAAQgF,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAFsB;AAG9B,qBAAa,MAAKpF,KAAL,CAAW0E,MAAX,KAAsB,IAAtB,GAA6B,MAAK1E,KAAL,CAAW0E,MAAX,CAAkBhD,EAA/C,GAAoD,EAHnC;AAI9B,oBAAY,MAAK2D,iBAAL,EAJkB;AAK9B,2BAAmBT,eALW;AAM9B,sBAAc,MAAK5E,KAAL,CAAWO,eANK;AAO9B,yBAAiB,MAAKP,KAAL,CAAWsF,iBAAX,CAA6B5D;AAPhB,OAAf,CAAnB;;AASA,UAAId,IAAI,gCAAR;;AACA,UAAI2E,QAAQ,GAAG,IAAIzE,cAAJ,EAAf;AACAyE,MAAAA,QAAQ,CAACxE,gBAAT,CAA0B,kBAA1B,EAA8C,YAAY;AACtD,YAAIwE,QAAQ,CAACvE,UAAT,KAAwB,CAA5B,EAA+B;AAC3B,cAAIuE,QAAQ,CAACtE,MAAT,KAAoB,GAAxB,EAA6B;AACzB,gBAAIuE,aAAa,GAAGrE,IAAI,CAACC,KAAL,CAAWmE,QAAQ,CAAClE,YAApB,CAApB;AACAT,YAAAA,IAAI,CAACR,QAAL,iCACOQ,IAAI,CAACZ,KADZ;AAEIK,cAAAA,YAAY,EAAE,IAFlB;AAGIC,cAAAA,eAAe,EAAE,iDAAiDkF,aAAa,CAAC9D;AAHpF;AAKH,WAPD,MAOO;AACHd,YAAAA,IAAI,CAACR,QAAL,iCACOQ,IAAI,CAACZ,KADZ;AAEIK,cAAAA,YAAY,EAAE,IAFlB;AAGIC,cAAAA,eAAe,EAAE;AAHrB;AAKH;AACJ;AACJ,OAjBD;AAkBAiF,MAAAA,QAAQ,CAACrD,IAAT,CAAc,MAAd,EAAsB,MAAK3C,KAAL,CAAW4C,OAAX,GAAqB,OAA3C;AACAoD,MAAAA,QAAQ,CAACnD,gBAAT,CAA0B,eAA1B,EAA2C,YAAY,MAAKpC,KAAL,CAAWqC,WAAlE;AACAkD,MAAAA,QAAQ,CAACnD,gBAAT,CAA0B,cAA1B,EAA0C,kBAA1C;AACAmD,MAAAA,QAAQ,CAACjD,IAAT,CAAc2C,YAAd;AACH,KApbkB;;AAAA,UAybnBQ,2BAzbmB,GAybW,UAACC,SAAD,EAAe;AACzC,UAAIpE,SAAS,GAAG,MAAKtB,KAAL,CAAWsB,SAA3B;AACA,UAAIpB,eAAe,GAAG,EAAtB;AACAoB,MAAAA,SAAS,CAACC,OAAV,CAAkB,UAAAE,OAAO,EAAI;AACzB,YAAIA,OAAO,CAACC,EAAR,KAAegE,SAAnB,EAA8B;AAC1BjE,UAAAA,OAAO,CAACO,QAAR,GAAmB,IAAnB;AACA9B,UAAAA,eAAe,GAAGuB,OAAO,CAACC,EAA1B;AACH,SAHD,MAGO;AACHD,UAAAA,OAAO,CAACO,QAAR,GAAmB,KAAnB;AACH;AACJ,OAPD;;AAQA,YAAK5B,QAAL,iCACO,MAAKJ,KADZ;AAEIsB,QAAAA,SAAS,EAAEA,SAFf;AAGIpB,QAAAA,eAAe,EAAEA;AAHrB;AAKH,KAzckB;;AAAA,UA4cnByF,WA5cmB,GA4cL,YAAM;AAChB,UAAIC,QAAQ,GAAG,CAAf;;AACA,YAAK5F,KAAL,CAAW6E,SAAX,CAAqBtD,OAArB,CAA6B,UAAAuD,QAAQ,EAAI;AACrCc,QAAAA,QAAQ,GAAGA,QAAQ,GAAGd,QAAQ,CAACC,WAA/B;AACH,OAFD;;AAGA,aAAOa,QAAP;AACH,KAldkB;;AAAA,UAqdnBP,iBArdmB,GAqdC,YAAM;AACtB,UAAIQ,cAAc,GAAG,CAArB;;AACA,UAAI,MAAK7F,KAAL,CAAW0E,MAAX,KAAsB,IAA1B,EAAgC;AAC5BmB,QAAAA,cAAc,GAAI,MAAKF,WAAL,KAAqB,MAAK3F,KAAL,CAAW0E,MAAX,CAAkBoB,OAAxC,GAAmD,GAApE;AACA,eAAOD,cAAP;AACH;;AACD,aAAOA,cAAP;AACH,KA5dkB;;AAAA,UA+dnBE,YA/dmB,GA+dJ,YAAM;AACjB,UAAIC,SAAS,GAAG,MAAKL,WAAL,KAAqB,MAAKN,iBAAL,EAArC;;AACA,aAAOW,SAAP;AACH,KAlekB;;AAAA,UAqenBC,aAremB,GAqeH,UAACrD,KAAD,EAAQsD,MAAR,EAAmB;AAC/B,UAAIA,MAAM,KAAK,WAAf,EAA4B;AACxB;AACH;;AACD,YAAK9F,QAAL,iCACO,MAAKJ,KADZ;AAEIM,QAAAA,eAAe,EAAE,EAFrB;AAGID,QAAAA,YAAY,EAAE;AAHlB;AAKH,KA9ekB;;AAAA,UAifnB8F,cAjfmB,GAifF,YAAM;AACnB,UAAI,CAAC,MAAKnG,KAAL,CAAWoG,UAAhB,EAA4B;AACxB,4BAAO,oBAAC,QAAD;AAAU,UAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;AACJ,KArfkB;;AAAA,UAsfnBC,oBAtfmB,GAsfI,YAAM;AACzB,YAAKjG,QAAL,iCACO,MAAKJ,KADZ;AAEIoG,QAAAA,UAAU,EAAE;AAFhB;AAIH,KA3fkB;;AAEf,UAAKpG,KAAL,GAAa;AACTG,MAAAA,UAAU,EAAE,CADH;AAETmG,MAAAA,KAAK,EAAE,MAAKxG,QAAL,EAFE;AAGTG,MAAAA,KAAK,EAAE,CAHE;AAIToC,MAAAA,WAAW,EAAEkE,cAAc,CAACC,OAAf,CAAuB,cAAvB,CAJJ;AAKTlF,MAAAA,SAAS,EAAE,EALF;AAMTpB,MAAAA,eAAe,EAAE,EANR;AAOT0B,MAAAA,gBAAgB,EAAE,EAPT;AAQTyB,MAAAA,wBAAwB,EAAE,UARjB;AASTvB,MAAAA,QAAQ,EAAE,EATD;AAUTyB,MAAAA,gBAAgB,EAAE,UAVT;AAWT5B,MAAAA,IAAI,EAAE,EAXG;AAYT2B,MAAAA,YAAY,EAAE,UAZL;AAaTH,MAAAA,aAAa,EAAE,EAbN;AAcTK,MAAAA,aAAa,EAAE,UAdN;AAeTzB,MAAAA,OAAO,EAAE,EAfA;AAgBT0B,MAAAA,eAAe,EAAE,UAhBR;AAiBTC,MAAAA,eAAe,EAAE,UAjBR;AAkBT+C,MAAAA,MAAM,EAAE,EAlBC;AAmBTlG,MAAAA,eAAe,EAAE,EAnBR;AAoBTmG,MAAAA,OAAO,EAAE,EApBA;AAqBT7B,MAAAA,SAAS,EAAEtF,KAAK,CAACoH,QAAN,CAAe9B,SAAf,GAA2BtF,KAAK,CAACoH,QAAN,CAAe9B,SAA1C,GAAsD,EArBxD;AAqB4D;AACrES,MAAAA,iBAAiB,EAAE/F,KAAK,CAACoH,QAAN,CAAerB,iBAAf,GAAmC/F,KAAK,CAACoH,QAAN,CAAerB,iBAAlD,GAAsE;AAACsB,QAAAA,IAAI,EAAC;AAAN,OAtBhF;AAsB6F;AACtGlC,MAAAA,MAAM,EAAE,IAvBC;AAwBTP,MAAAA,UAAU,EAAE,EAxBH;AAyBTG,MAAAA,kBAAkB,EAAE,UAzBX;AA0BTC,MAAAA,kBAAkB,EAAE,UA1BX;AA2BTlE,MAAAA,YAAY,EAAE,KA3BL;AA4BTC,MAAAA,eAAe,EAAE,EA5BR;AA6BTuG,MAAAA,UAAU,EAAE9J,IA7BH;AA8BT2F,MAAAA,UAAU,EAAC,CA9BF;AA+BT0D,MAAAA,UAAU,EAAEG,cAAc,CAACC,OAAf,CAAuB,cAAvB,MAA2C,IAA3C,GAAkD,KAAlD,GAA0D;AA/B7D,KAAb;AAFe;AAqClB,G,CACD;;;;;AAuHA;AACA;AACA;wCACoB;AAChB,UAAI,KAAKxG,KAAL,CAAWoG,UAAf,EAA2B;AACzB;AACE,aAAK1F,aAAL,GAFuB,CAKtB;;AACD,YAAIoG,UAAU,GAAG,IAAjB;AACA,YAAIC,SAAS,GAAG,IAAIjG,cAAJ,EAAhB;AACA,YAAIF,IAAI,GAAG,IAAX;AACAmG,QAAAA,SAAS,CAAChG,gBAAV,CAA2B,kBAA3B,EAA+C,YAAY;AACvD,cAAIgG,SAAS,CAAC/F,UAAV,KAAyB,CAAzB,IAA8B+F,SAAS,CAAC9F,MAAV,KAAqB,GAAvD,EAA4D;AACxD,gBAAIwF,MAAM,GAAGtF,IAAI,CAACC,KAAL,CAAW2F,SAAS,CAAC1F,YAArB,EAAmCoF,MAAhD;AACA7F,YAAAA,IAAI,CAACR,QAAL,iCACOQ,IAAI,CAACZ,KADZ;AAEIyG,cAAAA,MAAM,EAAEA;AAFZ;AAIH;AACJ,SARD;AASAM,QAAAA,SAAS,CAAC7E,IAAV,CAAe,KAAf,EAAsB,KAAK3C,KAAL,CAAW4C,OAAX,GAAqB,QAA3C;AACA4E,QAAAA,SAAS,CAACzE,IAAV,CAAewE,UAAf,EAnBuB,CAsBvB;;AACA,YAAIE,WAAW,GAAG,IAAlB;AACA,YAAIC,UAAU,GAAG,IAAInG,cAAJ,EAAjB;AACAmG,QAAAA,UAAU,CAAClG,gBAAX,CAA4B,kBAA5B,EAAgD,YAAY;AACxD,cAAIkG,UAAU,CAACjG,UAAX,KAA0B,CAA1B,IAA+BiG,UAAU,CAAChG,MAAX,KAAsB,GAAzD,EAA8D;AAC1D,gBAAIyF,OAAO,GAAGvF,IAAI,CAACC,KAAL,CAAW6F,UAAU,CAAC5F,YAAtB,EAAoC6F,cAAlD;AACAtG,YAAAA,IAAI,CAACR,QAAL,iCACOQ,IAAI,CAACZ,KADZ;AAEI0G,cAAAA,OAAO,EAAEA;AAFb;AAIH;AACJ,SARD;AASAO,QAAAA,UAAU,CAAC/E,IAAX,CAAgB,KAAhB,EAAuB,KAAK3C,KAAL,CAAW4C,OAAX,GAAqB,SAA5C;AACA8E,QAAAA,UAAU,CAAC3E,IAAX,CAAgB0E,WAAhB;AAEAxE,QAAAA,MAAM,CAACzB,gBAAP,CAAwB,QAAxB,EAAkC,KAAKwB,iBAAvC,EArCuB,CAqCoC;AAC9D;AACJ,K,CAED;;;;2CACuB;AACnBC,MAAAA,MAAM,CAAC2E,mBAAP,CAA2B,QAA3B,EAAqC,KAAKC,uBAA1C,EADmB,CACgD;AACtE,K,CAGD;AACA;;;;6BA8SS;AAAA;;AAAA,UACGC,OADH,GACe,KAAK9H,KADpB,CACG8H,OADH;AAEL,0BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEK,KAAKlB,cAAL;AAAsB;AAF3B,qBAII,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAK5G,KAAL,CAAW4C,OAA5B;AAAqC,QAAA,mBAAmB,EAAE,KAA1D;AAAiE,QAAA,cAAc,EAAE,KAAKkE,oBAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,eAKI;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,OAAD;AAAS,QAAA,UAAU,EAAE,KAAKrG,KAAL,CAAWG,UAAhC;AAA4C,QAAA,WAAW,EAAC,UAAxD;AAAmE,QAAA,SAAS,EAAEkH,OAAO,CAAC1J,OAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKqC,KAAL,CAAWsG,KAAX,CAAiBgB,GAAjB,CAAqB,UAACC,KAAD,EAAQC,KAAR;AAAA;AAAA;AAAoB;AACtC,8BAAC,IAAD;AAAM,YAAA,GAAG,EAAED,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAYA,KAAZ,CADJ,eAEI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACKC,KAAK,KAAK,CAAV,gBACG;AAAK,YAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI,oBAAC,IAAD;AAAM,YAAA,SAAS,EAAC,cAAhB;AAA+B,YAAA,KAAK,EAAE,MAAI,CAACxH,KAAL,CAAWC,KAAjD;AAAwD,YAAA,QAAQ,EAAE,MAAI,CAAC0C,iBAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI,oBAAC,GAAD;AAAK,YAAA,KAAK,EAAC,kBAAX;AAA8B,YAAA,SAAS,EAAE0E,OAAO,CAACvJ,GAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,oBAAC,GAAD;AAAK,YAAA,KAAK,EAAC,aAAX;AAAyB,YAAA,SAAS,EAAEuJ,OAAO,CAACvJ,GAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,CADJ,EAKK,MAAI,CAACkC,KAAL,CAAWC,KAAX,KAAqB,CAArB;AAAA;AAA0B;AACvB,8BAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACK,MAAI,CAACD,KAAL,CAAWsB,SAAX,CAAqBmG,MAArB,KAAgC,CAAhC,gBACG,oBAAC,QAAD;AAAU,YAAA,SAAS,EAAEJ,OAAO,CAACrJ,QAA7B;AAAuC,YAAA,IAAI,EAAE,MAAI,CAACgC,KAAL,CAAW0C,UAAxD;AAAoE,YAAA,OAAO,EAAE,CAA7E;AAAgF,YAAA,UAAU,EAAC,MAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACK,MAAI,CAAC1C,KAAL,CAAWsB,SAAX,CAAqBgG,GAArB,CAAyB,UAAA7F,OAAO;AAAA,gCAC7B,oBAAC,YAAD;AAAc,cAAA,SAAS,EAAE4F,OAAO,CAAClJ,YAAjC;AAA+C,cAAA,GAAG,EAAEsD,OAAO,CAACC,EAA5D;AAAgE,cAAA,KAAK,EAAE;AAAEgG,gBAAAA,WAAW,EAAEjG,OAAO,CAACO,QAAR,GAAmB,gBAAnB,GAAsC;AAArD,eAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACI;AAAK,cAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACI,oBAAC,UAAD;AAAY,cAAA,OAAO,EAAC,OAApB;AAA4B,cAAA,SAAS,EAAC,GAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA2CP,OAAO,CAACG,gBAAnD,CADJ,eAEI,oBAAC,UAAD;AAAY,cAAA,OAAO,EAAC,OAApB;AAA4B,cAAA,SAAS,EAAC,GAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA2CH,OAAO,CAACK,QAAnD,CAFJ,eAGI,oBAAC,UAAD;AAAY,cAAA,OAAO,EAAC,OAApB;AAA4B,cAAA,SAAS,EAAC,GAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA2CL,OAAO,CAACE,IAAnD,CAHJ,eAII,oBAAC,UAAD;AAAY,cAAA,OAAO,EAAC,OAApB;AAA4B,cAAA,SAAS,EAAC,GAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA2CF,OAAO,CAACzB,KAAR,CAAc2H,UAAzD,CAJJ,eAKI,oBAAC,UAAD;AAAY,cAAA,OAAO,EAAC,OAApB;AAA4B,cAAA,SAAS,EAAC,GAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA2ClG,OAAO,CAACM,OAAnD,CALJ,eAMI,oBAAC,UAAD;AAAY,cAAA,SAAS,EAAEsF,OAAO,CAAC/I,kBAA/B;AAAmD,cAAA,OAAO,EAAE;AAAA,uBAAM,MAAI,CAACmH,2BAAL,CAAiChE,OAAO,CAACC,EAAzC,CAAN;AAAA,eAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACI,oBAAC,eAAD;AAAiB,cAAA,KAAK,EAAE;AAAE3C,gBAAAA,KAAK,EAAE0C,OAAO,CAACO,QAAR,GAAmB,OAAnB,GAA6B;AAAtC,eAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CANJ,CADJ,CAD6B;AAAA,WAAhC,CADL,CADH,gBAkBG,oBAAC,UAAD;AAAY,YAAA,OAAO,EAAC,OAApB;AAA4B,YAAA,SAAS,EAAC,GAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gJAnBR,CANR,EA6BK,MAAI,CAAChC,KAAL,CAAWC,KAAX,KAAqB,CAArB;AAAA;AAA0B;AACvB,8BAAC,YAAD;AAAc,YAAA,SAAS,EAAEoH,OAAO,CAAC9I,eAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI,oBAAC,WAAD;AAAa,YAAA,QAAQ,MAArB;AAAsB,YAAA,SAAS,EAAE8I,OAAO,CAAC5I,WAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI,oBAAC,UAAD;AAAY,YAAA,OAAO,EAAC,oBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADJ,eAEI,oBAAC,KAAD;AAAO,YAAA,EAAE,EAAC,oBAAV;AAA+B,YAAA,SAAS,EAAC,cAAzC;AAAwD,YAAA,gBAAgB,EAAE,MAAI,CAACuB,KAAL,CAAW4B,gBAArF;AAAuG,YAAA,SAAS,EAAE,IAAlH;AAAwH,YAAA,QAAQ,EAAE,MAAI,CAACiC,kCAAvI;AAA2K,YAAA,KAAK,EAAE,MAAI,CAAC7D,KAAL,CAAW4B,gBAA7L;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,oBAAC,cAAD;AAAgB,YAAA,SAAS,EAAE,MAAI,CAAC5B,KAAL,CAAWqD,wBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI;AAAM,YAAA,SAAS,EAAC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,CAHJ,CADJ,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ,eASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ,eAUI,oBAAC,WAAD;AAAa,YAAA,SAAS,EAAEgE,OAAO,CAAC5I,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI,oBAAC,UAAD;AAAY,YAAA,OAAO,EAAC,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,eAEI,oBAAC,KAAD;AAAO,YAAA,EAAE,EAAC,UAAV;AAAqB,YAAA,SAAS,EAAC,cAA/B;AAA8C,YAAA,QAAQ,EAAE,MAAI,CAACuB,KAAL,CAAW8B,QAAnE;AAA6E,YAAA,SAAS,EAAE,IAAxF;AAA8F,YAAA,QAAQ,EAAE,MAAI,CAACgC,0BAA7G;AAAyI,YAAA,KAAK,EAAE,MAAI,CAAC9D,KAAL,CAAW8B,QAA3J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,oBAAC,cAAD;AAAgB,YAAA,SAAS,EAAE,MAAI,CAAC9B,KAAL,CAAWuD,gBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI;AAAM,YAAA,SAAS,EAAC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,CAHJ,CAVJ,eAiBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBJ,eAkBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAlBJ,eAmBI,oBAAC,WAAD;AAAa,YAAA,QAAQ,MAArB;AAAsB,YAAA,SAAS,EAAE8D,OAAO,CAAC5I,WAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI,oBAAC,UAAD;AAAY,YAAA,OAAO,EAAC,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,oBAAC,KAAD;AAAO,YAAA,EAAE,EAAC,MAAV;AAAiB,YAAA,SAAS,EAAC,cAA3B;AAA0C,YAAA,IAAI,EAAC,MAA/C;AAAsD,YAAA,IAAI,EAAE,MAAI,CAACuB,KAAL,CAAW2B,IAAvE;AAA6E,YAAA,SAAS,EAAE,IAAxF;AAA8F,YAAA,QAAQ,EAAE,MAAI,CAACoC,sBAA7G;AAAqI,YAAA,KAAK,EAAE,MAAI,CAAC/D,KAAL,CAAW2B,IAAvJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,oBAAC,cAAD;AAAgB,YAAA,SAAS,EAAE,MAAI,CAAC3B,KAAL,CAAWsD,YAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI;AAAM,YAAA,SAAS,EAAC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,CAHJ,CAnBJ,eA0BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA1BJ,eA2BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA3BJ,eA4BI,oBAAC,WAAD;AAAa,YAAA,QAAQ,MAArB;AAAsB,YAAA,SAAS,EAAE+D,OAAO,CAAC5I,WAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI,oBAAC,UAAD;AAAY,YAAA,OAAO,EAAC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,eAEI,oBAAC,MAAD;AAAQ,YAAA,EAAE,EAAC,OAAX;AAAmB,YAAA,SAAS,EAAE4I,OAAO,CAAC7I,WAAtC;AAAmD,YAAA,KAAK,EAAE,MAAI,CAACwB,KAAL,CAAWmD,aAArE;AAAoF,YAAA,QAAQ,EAAE,MAAI,CAACa,gCAAnG;AAAqI,YAAA,SAAS,EAAE;AAAE4D,cAAAA,KAAK,EAAE;AAAEnK,gBAAAA,SAAS,EAAE,MAAb;AAAqBoK,gBAAAA,SAAS,EAAE;AAAhC;AAAT,aAAhJ;AAAsM,YAAA,KAAK,EAAE,MAAI,CAAC7H,KAAL,CAAWmD,aAAxN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACK,MAAI,CAACnD,KAAL,CAAWyG,MAAX,CAAkBa,GAAlB,CAAsB,UAAAtH,KAAK;AAAA,gCACxB,oBAAC,QAAD;AAAU,cAAA,KAAK,EAAEA,KAAK,CAAC0B,EAAvB;AAA2B,cAAA,GAAG,EAAE1B,KAAK,CAAC0B,EAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA4C1B,KAAK,CAAC2H,UAAlD,CADwB;AAAA,WAA3B,CADL,CAFJ,eAOI,oBAAC,cAAD;AAAgB,YAAA,SAAS,EAAE,MAAI,CAAC3H,KAAL,CAAWwD,aAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI;AAAM,YAAA,SAAS,EAAC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,CAPJ,CA5BJ,eAuCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAvCJ,eAwCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAxCJ,eAyCI,oBAAC,WAAD;AAAa,YAAA,QAAQ,MAArB;AAAsB,YAAA,SAAS,EAAE6D,OAAO,CAAC5I,WAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI,oBAAC,UAAD;AAAY,YAAA,OAAO,EAAC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,eAEI,oBAAC,KAAD;AAAO,YAAA,EAAE,EAAC,SAAV;AAAoB,YAAA,SAAS,EAAC,cAA9B;AAA6C,YAAA,OAAO,EAAE,MAAI,CAACuB,KAAL,CAAW+B,OAAjE;AAA0E,YAAA,SAAS,EAAE,IAArF;AAA2F,YAAA,QAAQ,EAAE,MAAI,CAACkC,yBAA1G;AAAqI,YAAA,KAAK,EAAE,MAAI,CAACjE,KAAL,CAAW+B,OAAvJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,oBAAC,cAAD;AAAgB,YAAA,SAAS,EAAE,MAAI,CAAC/B,KAAL,CAAWyD,eAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI;AAAM,YAAA,SAAS,EAAC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,CAHJ,eAMI,oBAAC,cAAD;AAAgB,YAAA,SAAS,EAAE,MAAI,CAACzD,KAAL,CAAW0D,eAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI;AAAM,YAAA,SAAS,EAAC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EADJ,CANJ,CAzCJ,eAmDI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAnDJ,eAoDI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YApDJ,eAqDI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YArDJ,eAsDI,oBAAC,MAAD;AAAQ,YAAA,OAAO,EAAC,WAAhB;AAA4B,YAAA,SAAS,EAAE2D,OAAO,CAAC3I,UAA/C;AAA2D,YAAA,KAAK,EAAC,WAAjE;AAA6E,YAAA,OAAO,EAAE,MAAI,CAACqE,uBAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAtDJ,CA9BR,CADH,gBA0FG;AAAK,YAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI,oBAAC,WAAD;AAAa,YAAA,SAAS,EAAC,UAAvB;AAAkC,YAAA,SAAS,EAAEsE,OAAO,CAACS,gBAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI,oBAAC,SAAD;AAAW,YAAA,SAAS,EAAC,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADJ,eAII,oBAAC,UAAD;AAAY,0BAAW,SAAvB;AAAiC,YAAA,IAAI,EAAC,SAAtC;AAAgD,YAAA,KAAK,EAAE,MAAI,CAAC9H,KAAL,CAAWO,eAAlE;AAAmF,YAAA,QAAQ,EAAE,MAAI,CAACsC,kBAAlG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACK,MAAI,CAAC7C,KAAL,CAAW0G,OAAX,CAAmBY,GAAnB,CAAuB,UAAAZ,OAAO;AAAA,gCAC3B,oBAAC,gBAAD;AAAkB,cAAA,GAAG,EAAEA,OAAO,CAAChF,EAA/B;AAAmC,cAAA,KAAK,EAAEgF,OAAO,CAAChF,EAAlD;AAAsD,cAAA,OAAO,eAAE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA/D;AAA0E,cAAA,KAAK,EAAEgF,OAAO,CAACqB,YAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAD2B;AAAA,WAA9B,CADL,CAJJ,CADJ,CA3FR,eA2GI;AAAK,YAAA,SAAS,EAAEV,OAAO,CAAChK,gBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACI,oBAAC,MAAD;AACI,YAAA,QAAQ,EAAE,MAAI,CAAC2C,KAAL,CAAWG,UAAX,KAA0B,CADxC;AAEI,YAAA,OAAO,EAAE,MAAI,CAACK,sBAFlB;AAGI,YAAA,SAAS,EAAE6G,OAAO,CAAC7J,MAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAQI,oBAAC,MAAD;AACI,YAAA,OAAO,EAAC,WADZ;AAEI,YAAA,KAAK,EAAC,SAFV;AAGI,YAAA,OAAO,EAAE,MAAI,CAACuC,sBAHlB;AAII,YAAA,SAAS,EAAEsH,OAAO,CAAC7J,MAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAMK,MAAI,CAACwC,KAAL,CAAWG,UAAX,KAA0B,MAAI,CAACH,KAAL,CAAWsG,KAAX,CAAiBmB,MAAjB,GAA0B,CAApD,GAAwD,QAAxD,GAAmE,MANxE,CARJ,CADJ,CA3GJ,CAFJ;AADkB;AAAA,OAArB,CADL,CADJ,EAuIK,KAAKzH,KAAL,CAAWG,UAAX,KAA0B,KAAKH,KAAL,CAAWsG,KAAX,CAAiBmB,MAA3C,iBACG,oBAAC,KAAD;AAAO,QAAA,MAAM,MAAb;AAAc,QAAA,SAAS,EAAE,CAAzB;AAA4B,QAAA,SAAS,EAAEJ,OAAO,CAACzJ,cAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDADJ,eAEI,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAK6C,wBAAtB;AAAgD,QAAA,SAAS,EAAE4G,OAAO,CAAC7J,MAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,CAxIR,CADJ,eAkJI;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,IAAD;AAAM,QAAA,SAAS,EAAE6J,OAAO,CAACW,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,UAAD;AACI,QAAA,KAAK,EAAC,SADV;AAEI,QAAA,oBAAoB,EAAE;AAClBC,UAAAA,OAAO,EAAE;AADS,SAF1B;AAKI,QAAA,SAAS,EAAEZ,OAAO,CAACzI,aALvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAQI,oBAAC,WAAD;AAAa,QAAA,SAAS,EAAEyI,OAAO,CAAC1I,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,UAAD;AAAY,QAAA,OAAO,EAAC,WAApB;AAAgC,QAAA,SAAS,EAAC,GAA1C;AAA8C,QAAA,SAAS,EAAE0I,OAAO,CAACxI,cAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAkF,KAAKmB,KAAL,CAAWsF,iBAAX,CAA6BsB,IAA/G,CADJ,EAEK,KAAK5G,KAAL,CAAW6E,SAAX,CAAqByC,GAArB,CAAyB,UAAAxC,QAAQ;AAAA,4BAC9B;AAAK,UAAA,SAAS,EAAC,qBAAf;AAAqC,UAAA,GAAG,EAAEA,QAAQ,CAACpD,EAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI;AAAG,UAAA,SAAS,EAAC,qBAAb;AAAmC,yBAAY,MAA/C;AAAsD,UAAA,KAAK,EAAE;AAAE3C,YAAAA,KAAK,EAAE+F,QAAQ,CAACoD,QAAT,KAAsB,SAAtB,GAAkC,SAAlC,GAA8C;AAAvD,WAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,eAEI,oBAAC,UAAD;AAAY,UAAA,OAAO,EAAC,WAApB;AAAgC,UAAA,SAAS,EAAC,GAA1C;AAA8C,UAAA,SAAS,EAAEb,OAAO,CAACvI,YAAjE;AAA+E,UAAA,EAAE,EAAC,wBAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA6GgG,QAAQ,CAAC8B,IAAT,CAAc,CAAd,EAAiBuB,WAAjB,KAAiCrD,QAAQ,CAAC8B,IAAT,CAAcwB,KAAd,CAAoB,CAApB,CAA9I,CAFJ,eAGI,oBAAC,UAAD;AAAY,UAAA,OAAO,EAAC,WAApB;AAAgC,UAAA,SAAS,EAAC,GAA1C;AAA8C,UAAA,SAAS,EAAEf,OAAO,CAACrI,YAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAgF8F,QAAQ,CAACE,QAAzF,CAHJ,eAII;AAAK,UAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI;AAAG,UAAA,SAAS,EAAC,WAAb;AAAyB,yBAAY,MAArC;AAA4C,UAAA,KAAK,EAAE;AAAEjG,YAAAA,KAAK,EAAE;AAAT,WAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,eAEI,oBAAC,UAAD;AAAY,UAAA,OAAO,EAAC,WAApB;AAAgC,UAAA,SAAS,EAAC,GAA1C;AAA8C,UAAA,SAAS,EAAEsI,OAAO,CAACgB,SAAjE;AAA4E,UAAA,EAAE,EAAC,oBAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAqGvD,QAAQ,CAACC,WAAT,CAAqBuD,OAArB,CAA6B,CAA7B,CAArG,CAFJ,CAJJ,CAD8B;AAAA,OAAjC,CAFL,eAaI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,WAAD;AAAa,QAAA,SAAS,EAAEjB,OAAO,CAACkB,iBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,UAAD;AAAY,QAAA,OAAO,EAAC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,eAEI,oBAAC,WAAD;AAAa,QAAA,EAAE,EAAC,QAAhB;AAAyB,QAAA,SAAS,EAAElB,OAAO,CAAClI,WAA5C;AAAyD,QAAA,KAAK,EAAE,KAAKa,KAAL,CAAWmE,UAA3E;AAAuF,QAAA,QAAQ,EAAE,KAAKD,4BAAtG;AAAoI,QAAA,WAAW,EAAC,YAAhJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,eAGI,oBAAC,cAAD;AAAgB,QAAA,SAAS,EAAE,KAAKlE,KAAL,CAAWsE,kBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAM,QAAA,SAAS,EAAC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CAHJ,eAMI,oBAAC,cAAD;AAAgB,QAAA,SAAS,EAAE,KAAKtE,KAAL,CAAWuE,kBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAM,QAAA,SAAS,EAAC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,CANJ,CADJ,eAWI,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,WAAhB;AAA4B,QAAA,KAAK,EAAC,SAAlC;AAA4C,QAAA,SAAS,EAAE8C,OAAO,CAACjI,WAA/D;AAA4E,QAAA,OAAO,EAAE,KAAKgF,uBAA1F;AAAmH,QAAA,IAAI,EAAC,OAAxH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAXJ,CAbJ,eA0BI;AAAK,QAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,UAAD;AAAY,QAAA,OAAO,EAAC,WAApB;AAAgC,QAAA,SAAS,EAAC,GAA1C;AAA8C,QAAA,KAAK,EAAE;AAAErF,UAAAA,KAAK,EAAE;AAAT,SAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,eAEI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAG,QAAA,SAAS,EAAC,WAAb;AAAyB,uBAAY,MAArC;AAA4C,QAAA,KAAK,EAAE;AAAEA,UAAAA,KAAK,EAAE;AAAT,SAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAEI,oBAAC,UAAD;AAAY,QAAA,OAAO,EAAC,WAApB;AAAgC,QAAA,SAAS,EAAC,GAA1C;AAA8C,QAAA,KAAK,EAAE;AAAEA,UAAAA,KAAK,EAAE;AAAT,SAArD;AAAwE,QAAA,EAAE,EAAC,oBAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiG,KAAK4G,WAAL,GAAmB2C,OAAnB,CAA2B,CAA3B,CAAjG,CAFJ,CAFJ,CA1BJ,eAiCI;AAAK,QAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,UAAD;AAAY,QAAA,OAAO,EAAC,WAApB;AAAgC,QAAA,SAAS,EAAC,GAA1C;AAA8C,QAAA,SAAS,EAAEjB,OAAO,CAACrB,SAAjE;AAA4E,QAAA,KAAK,EAAE;AAAEjH,UAAAA,KAAK,EAAE;AAAT,SAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAG,QAAA,SAAS,EAAC,WAAb;AAAyB,uBAAY,MAArC;AAA4C,QAAA,KAAK,EAAE;AAAEA,UAAAA,KAAK,EAAE;AAAT,SAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAEI,oBAAC,UAAD;AAAY,QAAA,OAAO,EAAC,WAApB;AAAgC,QAAA,SAAS,EAAC,GAA1C;AAA8C,QAAA,KAAK,EAAE;AAAEA,UAAAA,KAAK,EAAE;AAAT,SAArD;AAAwE,QAAA,EAAE,EAAC,oBAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAiG,KAAKsG,iBAAL,GAAyBiD,OAAzB,CAAiC,CAAjC,CAAjG,CAFJ,CAFJ,CAjCJ,eA0CI,oBAAC,OAAD;AAAS,QAAA,SAAS,EAAEjB,OAAO,CAACnI,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA1CJ,eA2CI;AAAK,QAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,UAAD;AAAY,QAAA,OAAO,EAAC,WAApB;AAAgC,QAAA,SAAS,EAAC,GAA1C;AAA8C,QAAA,SAAS,EAAEmI,OAAO,CAACrB,SAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAG,QAAA,SAAS,EAAC,WAAb;AAAyB,uBAAY,MAArC;AAA4C,QAAA,KAAK,EAAE;AAAEjH,UAAAA,KAAK,EAAE;AAAT,SAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAEI,oBAAC,UAAD;AAAY,QAAA,OAAO,EAAC,WAApB;AAAgC,QAAA,SAAS,EAAC,GAA1C;AAA8C,QAAA,SAAS,EAAEsI,OAAO,CAACgB,SAAjE;AAA4E,QAAA,EAAE,EAAC,oBAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAqG,KAAKtC,YAAL,GAAoBuC,OAApB,CAA4B,CAA5B,CAArG,CAFJ,CAFJ,CA3CJ,eAmDI,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,WAAhB;AAA4B,QAAA,KAAK,EAAC,SAAlC;AAA4C,QAAA,SAAS,EAAE,IAAvD;AAA6D,QAAA,SAAS,EAAEjB,OAAO,CAACpI,gBAAhF;AAAkG,QAAA,OAAO,EAAE,KAAK0F,4BAAhH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAnDJ,CARJ,CADJ,CAlJJ,CALJ,eA0NI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,QAAD;AACI,QAAA,YAAY,EAAE;AACV6D,UAAAA,QAAQ,EAAE,QADA;AAEVC,UAAAA,UAAU,EAAE;AAFF,SADlB;AAKI,QAAA,IAAI,EAAE,KAAKzI,KAAL,CAAWK,YALrB;AAMI,QAAA,gBAAgB,EAAE,IANtB;AAOI,QAAA,OAAO,EAAE,KAAK4F,aAPlB;AAQI,QAAA,mBAAmB,EAAE,KAAKjG,KAAL,CAAW6G,UARpC;AASI,QAAA,YAAY,EAAE;AACV,8BAAoB;AADV,SATlB;AAYI,QAAA,OAAO,eAAE;AAAM,UAAA,EAAE,EAAC,YAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAuB,KAAK7G,KAAL,CAAWM,eAAlC,CAZb;AAaI,QAAA,MAAM,eACF,oBAAC,UAAD;AAAY,UAAA,KAAK,EAAC,SAAlB;AAA4B,UAAA,OAAO,EAAE,KAAK2F,aAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CAdR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CA1NJ,CADJ;AAkPH;;;;EApvBkBlL,S;;AAuvBvB,eAAeK,UAAU,CAAC+B,MAAD,CAAV,CAAmB0C,QAAnB,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport StepContent from '@material-ui/core/StepContent';\r\nimport { withStyles, Button, Tab, Tabs, IconButton, FormLabel, RadioGroup, FormControlLabel, Radio, Divider } from '@material-ui/core';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Input from '@material-ui/core/Input';\r\nimport { FormControl, InputLabel, FormHelperText } from '@material-ui/core';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport PropTypes from 'prop-types';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport FilledInput from '@material-ui/core/FilledInput';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { Redirect } from 'react-router-dom'\r\nimport 'font-awesome/css/font-awesome.min.css';\r\n\r\n\r\n\r\nimport Header from '../../common/header/Header';\r\nimport '../checkout/Checkout.css'\r\n\r\n// Custom Styles to over ride material ui default styles\r\nconst styles = (theme => ({\r\n\r\n    actionsContainer: { //Style for the action container in the stepper\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    button: { //style for the button in the stepper\r\n        marginTop: theme.spacing(2),\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    stepper: { //Style for the stepper\r\n        'padding-top': '0px',\r\n        '@media (max-width:600px)': {\r\n            'padding':'0px',\r\n        }\r\n    },\r\n    resetContainer: { // Style for the reset container\r\n        padding: theme.spacing(3),\r\n    },\r\n    tab: { //Style for the tab\r\n        \"font-weight\": 500,\r\n        '@media (max-width:600px)': {\r\n            width: '50%',\r\n        }\r\n    },\r\n    gridList: { //Style for the Grid List \r\n        flexWrap: 'nowrap',\r\n        // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\r\n        transform: 'translateZ(0)',\r\n\r\n\r\n    },\r\n    gridListTile: { //Style for the Grid list tile .\r\n        textAlign: 'left',\r\n        margin: '30px 0px 20px 0px',\r\n        'border-style': 'solid',\r\n        'border-width': '0.5px 3px 3px 0.5px',\r\n        'border-radius': '10px',\r\n        'padding': '8px',\r\n    },\r\n    addressCheckButton: { // Style fro the address check button\r\n        'float': 'right',\r\n    },\r\n    saveAddressForm: { //Style for the save address form \r\n        width: '60%',\r\n        'padding': '20px',\r\n        textAlign: 'left',\r\n\r\n    },\r\n    selectField: { //Style for the select field\r\n        width: '100%',\r\n    },\r\n    formControl: { //Style for the formcontrol\r\n        width: '200px',\r\n    },\r\n    formButton: { // Style for the button in the form\r\n        'font-weight': 400,\r\n        'width': '150px'\r\n    },\r\n    cardContent: { //Style for the Order summary card content \r\n        'padding-top': '0px',\r\n        'margin-left': '10px',\r\n        'margin-right': '10px'\r\n    },\r\n    summaryHeader: { //Style for the summary heading \r\n        'margin-left': '10px',\r\n        'margin-right': '10px'\r\n    },\r\n    restaurantName: { //Style for the restaurant name\r\n        'font-size': '18px',\r\n        'color': 'rgb(85,85,85)',\r\n        margin: '10px 0px 10px 0px'\r\n    },\r\n    menuItemName: { //Style for the menu item in the summary card\r\n        'margin-left': '10px',\r\n        color: 'grey'\r\n    },\r\n    itemQuantity: { // Style for the Item quantity \r\n        'margin-left': 'auto',\r\n        'margin-right':'30px',\r\n        color: 'grey'\r\n    },\r\n    placeOrderButton: { //Style for the Place order button in the order card\r\n        'font-weight': '400'\r\n    },\r\n    divider: { //Style for the divider \r\n        'margin': '10px 0px'\r\n    },\r\n    couponInput: {// Style for the input coupon\r\n        'width': '200px',\r\n        '@media(min-width:1300px)': {\r\n            width: '250px',\r\n        },\r\n        '@media(max-width:600px)': {\r\n            width: '200px',\r\n        }\r\n    },\r\n    applyButton: { //Style for the apply button\r\n        height: '40px'\r\n    },\r\n\r\n}))\r\n\r\n// Custom component created for the use in the tab\r\nconst TabContainer = function (props) {\r\n    return (\r\n        <Typography className={props.className} component=\"div\">\r\n            {props.children}\r\n        </Typography>\r\n    )\r\n}\r\n\r\nTabContainer.propTypes = {\r\n    children: PropTypes.node.isRequired\r\n}\r\n\r\n// Creating Checkout  class component to render the Checkout page as per the design\r\n\r\nclass Checkout extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            activeStep: 0,\r\n            steps: this.getSteps(),\r\n            value: 0,\r\n            accessToken: sessionStorage.getItem('access-token'),\r\n            addresses: [],\r\n            selectedAddress: \"\",\r\n            flatBuildingName: \"\",\r\n            flatBuildingNameRequired: \"dispNone\",\r\n            locality: \"\",\r\n            localityRequired: \"dispNone\",\r\n            city: \"\",\r\n            cityRequired: \"dispNone\",\r\n            selectedState: \"\",\r\n            stateRequired: \"dispNone\",\r\n            pincode: \"\",\r\n            pincodeRequired: \"dispNone\",\r\n            pincodeHelpText: \"dispNone\",\r\n            states: [],\r\n            selectedPayment: \"\",\r\n            payment: [],\r\n            cartItems: props.location.cartItems ? props.location.cartItems : [] ,//Setting state with details passed from the previous page\r\n            restaurantDetails: props.location.restaurantDetails ? props.location.restaurantDetails : {name:null}, //Setting state with details passed from the previous page\r\n            coupon: null,\r\n            couponName: \"\",\r\n            couponNameRequired: \"dispNone\",\r\n            couponNameHelpText: \"dispNone\",\r\n            snackBarOpen: false,\r\n            snackBarMessage: \"\",\r\n            transition: Fade,\r\n            noOfColumn:3,\r\n            isLoggedIn: sessionStorage.getItem('access-token') === null ? false : true,\r\n        }\r\n\r\n\r\n    }\r\n    //This method is called to get the array of steps name.\r\n    getSteps = () => {\r\n        return ['Delivery', 'Payment'];\r\n    }\r\n\r\n\r\n    //This method is called when next button is clicked in the stepper.\r\n    nextButtonClickHandler = () => {\r\n        if (this.state.value === 0) {\r\n            if (this.state.selectedAddress !== \"\") {\r\n                let activeStep = this.state.activeStep;\r\n                activeStep++;\r\n                this.setState({\r\n                    ...this.state,\r\n                    activeStep: activeStep,\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    ...this.state,\r\n                    snackBarOpen: true,\r\n                    snackBarMessage: \"Select Address\"\r\n                })\r\n            }\r\n        }\r\n        if(this.state.activeStep === 1){\r\n            if(this.state.selectedPayment === \"\"){\r\n                let activeStep = this.state.activeStep;\r\n                this.setState({\r\n                    ...this.state,\r\n                    activeStep:activeStep,\r\n                    snackBarOpen: true,\r\n                    snackBarMessage:\"Select Payment\",\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    //This method is called when back button is clicked in the stepper\r\n    backButtonClickHandler = () => {\r\n        let activeStep = this.state.activeStep;\r\n        activeStep--;\r\n        this.setState({\r\n            ...this.state,\r\n            activeStep: activeStep,\r\n        });\r\n    }\r\n\r\n    //This method is called when the change button in the stepper is called\r\n    changeButtonClickHandler = () => {\r\n        this.setState({\r\n            ...this.state,\r\n            activeStep: 0,\r\n        });\r\n    }\r\n    // This method calls the getAllAddress of customer endpoint \r\n    //Updates the page with all the address of the customer\r\n    getAllAddress = () => {\r\n        let data = null;\r\n        let that = this;\r\n        let xhrAddress = new XMLHttpRequest();\r\n\r\n        xhrAddress.addEventListener('readystatechange', function () {\r\n            if (xhrAddress.readyState === 4 && xhrAddress.status === 200) {\r\n                let responseAddresses = JSON.parse(xhrAddress.responseText).addresses;\r\n                let addresses = [];\r\n                responseAddresses.forEach(responseAddress => {\r\n                    let address = {\r\n                        id: responseAddress.id,\r\n                        city: responseAddress.city,\r\n                        flatBuildingName: responseAddress.flat_building_name,\r\n                        locality: responseAddress.locality,\r\n                        pincode: responseAddress.pincode,\r\n                        state: responseAddress.state,\r\n                        selected: false,\r\n                    }\r\n                    addresses.push(address)\r\n                })\r\n                that.setState({\r\n                    ...that.state,\r\n                    addresses: addresses\r\n                })\r\n            }\r\n        })\r\n\r\n        xhrAddress.open('GET', this.props.baseUrl + 'address/customer');\r\n        xhrAddress.setRequestHeader('authorization', 'Bearer ' + this.state.accessToken)\r\n        xhrAddress.send(data);\r\n\r\n    }\r\n\r\n    // Updates the column no as per the screen size.\r\n    getGridListColumn = () => {\r\n        if (window.innerWidth <= 600) {\r\n            this.setState({ \r\n                ...this.state,\r\n                noOfColumn: 2 \r\n            });\r\n        }else{\r\n            this.setState({ \r\n                ...this.state,\r\n                noOfColumn: 3 \r\n            });\r\n        }\r\n    }\r\n    \r\n    //This method handles change in the tabs.\r\n    tabsChangeHandler = (event, value) => {\r\n        this.setState({\r\n            value,\r\n        });\r\n    }\r\n\r\n    //This is called when a radio button is selected  in the payment\r\n    radioChangeHandler = (event) => {\r\n        this.setState({\r\n            ...this.state,\r\n            selectedPayment: event.target.value,\r\n        })\r\n    }\r\n    //This method is called when the components are mounted and in turn calls the api.\r\n    //This method call get all address,get all states and get all payment endpoints.\r\n    //Then re-renders the page with the data received from the api\r\n    componentDidMount() {\r\n        if (this.state.isLoggedIn) {\r\n          //Calling getAllAddress function to get all the address of the customer.\r\n            this.getAllAddress();\r\n\r\n\r\n             //API call to get all states \r\n            let statesData = null;\r\n            let xhrStates = new XMLHttpRequest();\r\n            let that = this;\r\n            xhrStates.addEventListener(\"readystatechange\", function () {\r\n                if (xhrStates.readyState === 4 && xhrStates.status === 200) {\r\n                    let states = JSON.parse(xhrStates.responseText).states;\r\n                    that.setState({\r\n                        ...that.state,\r\n                        states: states,\r\n                    })\r\n                }\r\n            })\r\n            xhrStates.open('GET', this.props.baseUrl + 'states');\r\n            xhrStates.send(statesData);\r\n\r\n\r\n            //API call to get all payment methods \r\n            let paymentData = null;\r\n            let xhrPayment = new XMLHttpRequest();\r\n            xhrPayment.addEventListener(\"readystatechange\", function () {\r\n                if (xhrPayment.readyState === 4 && xhrPayment.status === 200) {\r\n                    let payment = JSON.parse(xhrPayment.responseText).paymentMethods;\r\n                    that.setState({\r\n                        ...that.state,\r\n                        payment: payment,\r\n                    })\r\n                }\r\n            })\r\n            xhrPayment.open('GET', this.props.baseUrl + 'payment');\r\n            xhrPayment.send(paymentData);\r\n\r\n            window.addEventListener('resize', this.getGridListColumn); //Adding a event listening on the  to change the no of columns for the grid.\r\n        }\r\n    }\r\n\r\n    //This Method will be called when the components are unmounted so as to withdraw all the asynchronous function running. \r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateCardsGridListCols);// Removing event listener.\r\n    }\r\n\r\n\r\n    // This method is called when the save address button is clicked from the address form \r\n    //This method uses save address endpoint and sends the data as required by the endpoint to be persisted in the data base.\r\n    saveAddressClickHandler = () => {\r\n        if (this.saveAddressFormValid()) { //checking the form validity is right only then the api call is made\r\n            let newAddressData = JSON.stringify({ //Creating data of address to be sent to the end point.\r\n                \"city\": this.state.city,\r\n                \"flat_building_name\": this.state.flatBuildingName,\r\n                \"locality\": this.state.locality,\r\n                \"pincode\": this.state.pincode,\r\n                \"state_uuid\": this.state.selectedState,\r\n            })\r\n\r\n            let xhrSaveAddress = new XMLHttpRequest();\r\n            let that = this;\r\n\r\n            xhrSaveAddress.addEventListener(\"readystatechange\", function () {\r\n                if (xhrSaveAddress.readyState === 4 && xhrSaveAddress.status === 201) {\r\n                    that.setState({\r\n                        ...that.state,\r\n                        value: 0,\r\n\r\n                    })\r\n                    that.getAllAddress(); //Updating the page by calling get all address\r\n                }\r\n            })\r\n\r\n            xhrSaveAddress.open('POST', this.props.baseUrl + 'address')\r\n            xhrSaveAddress.setRequestHeader('authorization', 'Bearer ' + this.state.accessToken)\r\n            xhrSaveAddress.setRequestHeader(\"Content-Type\", \"application/json\");\r\n            xhrSaveAddress.send(newAddressData);\r\n        }\r\n    }\r\n\r\n    //This method checks the validity of the form submitted.\r\n    //This method return true if form is all right else displays relevant msg.\r\n    saveAddressFormValid = () => {\r\n        let flatBuildingNameRequired = \"dispNone\";\r\n        let cityRequired = \"dispNone\";\r\n        let localityRequired = \"dispNone\";\r\n        let stateRequired = \"dispNone\";\r\n        let pincodeRequired = \"dispNone\";\r\n        let pincodeHelpText = \"dispNone\";\r\n        let saveAddressFormValid = true;\r\n\r\n        if (this.state.flatBuildingName === \"\") { //checking if the flatBuildingName is not empty\r\n            flatBuildingNameRequired = \"dispBlock\";\r\n            saveAddressFormValid = false;\r\n        }\r\n\r\n        if (this.state.locality === \"\") { //checking if the locality is not empty\r\n            localityRequired = \"dispBlock\";\r\n            saveAddressFormValid = false;\r\n        }\r\n\r\n        if (this.state.selectedState === \"\") { //checking if the selectedState is not empty\r\n            stateRequired = \"dispBlock\";\r\n            saveAddressFormValid = false;\r\n        }\r\n\r\n        if (this.state.city === \"\") { //checking if the city is not empty\r\n            cityRequired = \"dispBlock\";\r\n            saveAddressFormValid = false;\r\n        }\r\n\r\n        if (this.state.pincode === \"\") { //checking if the pincode is not empty\r\n            pincodeRequired = \"dispBlock\";\r\n            saveAddressFormValid = false;\r\n        }\r\n        if (this.state.pincode !== \"\") {\r\n            var pincodePattern = /^\\d{6}$/;\r\n            if (!this.state.pincode.match(pincodePattern)) {  //checking the format of the pincode\r\n                pincodeHelpText = \"dispBlock\";\r\n                saveAddressFormValid = false;\r\n            }\r\n        }\r\n        this.setState({\r\n            ...this.state,\r\n            flatBuildingNameRequired: flatBuildingNameRequired,\r\n            cityRequired: cityRequired,\r\n            localityRequired: localityRequired,\r\n            stateRequired: stateRequired,\r\n            pincodeRequired: pincodeRequired,\r\n            pincodeHelpText: pincodeHelpText,\r\n        })\r\n\r\n        return saveAddressFormValid\r\n    }\r\n\r\n    //This method handles change in the input of FlatBuildingNameChangeHandler\r\n    inputFlatBuildingNameChangeHandler = (event) => {\r\n        this.setState({\r\n            ...this.state,\r\n            flatBuildingName: event.target.value,\r\n        })\r\n    }\r\n\r\n    //This method handles change in the input of locality\r\n    inputLocalityChangeHandler = (event) => {\r\n        this.setState({\r\n            ...this.state,\r\n            locality: event.target.value,\r\n        })\r\n    }\r\n\r\n    //This method handles change in the input of city\r\n    inputCityChangeHandler = (event) => {\r\n        this.setState({\r\n            ...this.state,\r\n            city: event.target.value,\r\n        })\r\n    }\r\n\r\n    //This method handles change in the input of state\r\n    selectSelectedStateChangeHandler = (event) => {\r\n        this.setState({\r\n            ...this.state,\r\n            selectedState: event.target.value,\r\n        })\r\n    }\r\n\r\n    //This method handles change in the input of pincode\r\n    inputPincodeChangeHandler = (event) => {\r\n        this.setState({\r\n            ...this.state,\r\n            pincode: event.target.value,\r\n        })\r\n    }\r\n    \r\n    //This method handles change in the input of coupon name\r\n    inputCouponNameChangeHandler = (event) => {\r\n        this.setState({\r\n            ...this.state,\r\n            couponName: event.target.value,\r\n        })\r\n    }\r\n    //This method handles the click on the apply button & calls the api to get coupon by name.\r\n    //If the coupon is invalid it will display invalid or else it will apply the coupon.\r\n    applyButtonClickHandler = () => {\r\n        let isCouponNameValid = true;\r\n        let couponNameRequired = \"dispNone\";\r\n        let couponNameHelpText = \"dispNone\";\r\n        if (this.state.couponName === \"\") {\r\n            isCouponNameValid = false;\r\n            couponNameRequired = \"dispBlock\";\r\n            this.setState({\r\n                couponNameRequired: couponNameRequired,\r\n                couponNameHelpText: couponNameHelpText,\r\n            })\r\n        }\r\n\r\n        //Api is called only when the data entered is right.\r\n        if (isCouponNameValid) {\r\n            let couponData = null;\r\n            let that = this;\r\n            let xhrCoupon = new XMLHttpRequest();\r\n            xhrCoupon.addEventListener(\"readystatechange\", function () {\r\n                if (xhrCoupon.readyState === 4) {\r\n                    if (xhrCoupon.status === 200) {\r\n                        let coupon = JSON.parse(xhrCoupon.responseText)\r\n                        that.setState({\r\n                            ...that.state,\r\n                            coupon: coupon,\r\n                        })\r\n                    } else {\r\n                        that.setState({\r\n                            ...that.state,\r\n                            couponNameHelpText: \"dispBlock\",\r\n                            couponNameRequired: \"dispNone\"\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n\r\n            xhrCoupon.open('GET', this.props.baseUrl + '/order/coupon/' + this.state.couponName)\r\n            xhrCoupon.setRequestHeader('authorization', 'Bearer ' + this.state.accessToken)\r\n            xhrCoupon.setRequestHeader(\"Content-Type\", \"application/json\");\r\n            xhrCoupon.setRequestHeader(\"Cache-Control\", \"no-cache\");\r\n            xhrCoupon.send(couponData);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // This method is called when the placeOrderButton is Clicked.\r\n    //This method calls the save order endpoint to save the order that has been created and returns with a order placed msg and id.\r\n    //If the API call is successfull relevant msg is shown in the snackbar other wise error msg is shown.\r\n    placeOrderButtonClickHandler = () => {\r\n        let item_quantities = [];\r\n        this.state.cartItems.forEach(cartItem => {\r\n            item_quantities.push({\r\n                'item_id': cartItem.id,\r\n                'price': cartItem.totalAmount,\r\n                'quantity': cartItem.quantity,\r\n            });\r\n        })\r\n        let newOrderData = JSON.stringify({ //Creating the data as required.\r\n            \"address_id\": this.state.selectedAddress,\r\n            \"bill\": Math.floor(Math.random() * 100),\r\n            \"coupon_id\": this.state.coupon !== null ? this.state.coupon.id : \"\",\r\n            \"discount\": this.getDiscountAmount(),\r\n            \"item_quantities\": item_quantities,\r\n            \"payment_id\": this.state.selectedPayment,\r\n            \"restaurant_id\": this.state.restaurantDetails.id,\r\n        })\r\n        let that = this;\r\n        let xhrOrder = new XMLHttpRequest();\r\n        xhrOrder.addEventListener(\"readystatechange\", function () {\r\n            if (xhrOrder.readyState === 4) {\r\n                if (xhrOrder.status === 201) {\r\n                    let responseOrder = JSON.parse(xhrOrder.responseText)\r\n                    that.setState({\r\n                        ...that.state,\r\n                        snackBarOpen: true,\r\n                        snackBarMessage: \"Order placed successfully! Your order ID is \" + responseOrder.id,\r\n                    });\r\n                } else {\r\n                    that.setState({\r\n                        ...that.state,\r\n                        snackBarOpen: true,\r\n                        snackBarMessage: \"Unable to place your order! Please try again!\",\r\n                    });\r\n                }\r\n            }\r\n        })\r\n        xhrOrder.open('POST', this.props.baseUrl + 'order')\r\n        xhrOrder.setRequestHeader('authorization', 'Bearer ' + this.state.accessToken)\r\n        xhrOrder.setRequestHeader('Content-Type', 'application/json');\r\n        xhrOrder.send(newOrderData);\r\n    }\r\n\r\n\r\n\r\n    // This Method is called when the address is selected from the existing address tab\r\n    addressSelectedClickHandler = (addressId) => {\r\n        let addresses = this.state.addresses;\r\n        let selectedAddress = \"\";\r\n        addresses.forEach(address => {\r\n            if (address.id === addressId) {\r\n                address.selected = true;\r\n                selectedAddress = address.id;\r\n            } else {\r\n                address.selected = false;\r\n            }\r\n        })\r\n        this.setState({\r\n            ...this.state,\r\n            addresses: addresses,\r\n            selectedAddress: selectedAddress\r\n        })\r\n    }\r\n\r\n    //This method returns Subtotal.\r\n    getSubTotal = () => {\r\n        let subTotal = 0;\r\n        this.state.cartItems.forEach(cartItem => {\r\n            subTotal = subTotal + cartItem.totalAmount;\r\n        })\r\n        return subTotal;\r\n    }\r\n\r\n    //This Method returns discount amount if applied.\r\n    getDiscountAmount = () => {\r\n        let discountAmount = 0;\r\n        if (this.state.coupon !== null) {\r\n            discountAmount = (this.getSubTotal() * this.state.coupon.percent) / 100;\r\n            return discountAmount\r\n        }\r\n        return discountAmount;\r\n    }\r\n\r\n    //This method returns net amount.\r\n    getNetAmount = () => {\r\n        let netAmount = this.getSubTotal() - this.getDiscountAmount();\r\n        return netAmount;\r\n    }\r\n\r\n    //This method handles the snackbar close call\r\n    snackBarClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        this.setState({\r\n            ...this.state,\r\n            snackBarMessage: \"\",\r\n            snackBarOpen: false,\r\n        })\r\n    }\r\n\r\n    //This method is called every time the page is rendered to check if the customer is logged in if not then redirected to the home page. \r\n    redirectToHome = () => {\r\n        if (!this.state.isLoggedIn) {\r\n            return <Redirect to=\"/\" />\r\n        }\r\n    }\r\n    logoutRedirectToHome = () => {\r\n        this.setState({\r\n            ...this.state,\r\n            isLoggedIn: false,\r\n        })\r\n    }\r\n\r\n    \r\n    \r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div>\r\n                \r\n                {this.redirectToHome() /*This method is called to check if logged in or not else redirected to home.*/}\r\n                {/*Rendering Header and passing parameter showHeaderSearchBox as false to remove the search box. */}\r\n                <Header baseUrl={this.props.baseUrl} showHeaderSearchBox={false} logoutRedirect={this.logoutRedirectToHome}/>\r\n                <div className=\"checkout-container\">\r\n                    <div className=\"stepper-container\">\r\n                        <Stepper activeStep={this.state.activeStep} orientation=\"vertical\" className={classes.stepper}>\r\n                            {this.state.steps.map((label, index) => ( //Iteration over each step to create a stepper\r\n                                <Step key={label}>\r\n                                    <StepLabel>{label}</StepLabel>\r\n                                    <StepContent>\r\n                                        {index === 0 ?\r\n                                            <div className=\"address-container\">\r\n                                                <Tabs className=\"address-tabs\" value={this.state.value} onChange={this.tabsChangeHandler}>\r\n                                                    <Tab label=\"EXISTING ADDRESS\" className={classes.tab} />\r\n                                                    <Tab label=\"NEW ADDRESS\" className={classes.tab} />\r\n                                                </Tabs>\r\n                                                {this.state.value === 0 && //Based on the value showing the tab value = 0 for existing address\r\n                                                    <TabContainer>\r\n                                                        {this.state.addresses.length !== 0 ?\r\n                                                            <GridList className={classes.gridList} cols={this.state.noOfColumn} spacing={2} cellHeight='auto'>\r\n                                                                {this.state.addresses.map(address => (\r\n                                                                    <GridListTile className={classes.gridListTile} key={address.id} style={{ borderColor: address.selected ? \"rgb(224,37,96)\" : \"white\" }}>\r\n                                                                        <div className=\"grid-list-tile-container\">\r\n                                                                            <Typography variant=\"body1\" component=\"p\">{address.flatBuildingName}</Typography>\r\n                                                                            <Typography variant=\"body1\" component=\"p\">{address.locality}</Typography>\r\n                                                                            <Typography variant=\"body1\" component=\"p\">{address.city}</Typography>\r\n                                                                            <Typography variant=\"body1\" component=\"p\">{address.state.state_name}</Typography>\r\n                                                                            <Typography variant=\"body1\" component=\"p\">{address.pincode}</Typography>\r\n                                                                            <IconButton className={classes.addressCheckButton} onClick={() => this.addressSelectedClickHandler(address.id)}>\r\n                                                                                <CheckCircleIcon style={{ color: address.selected ? \"green\" : \"grey\" }} />\r\n                                                                            </IconButton>\r\n                                                                        </div>\r\n                                                                    </GridListTile>\r\n                                                                ))}\r\n                                                            </GridList>\r\n                                                            :\r\n                                                            <Typography variant=\"body1\" component=\"p\">There are no saved addresses! You can save an address using the 'New Address' tab or using your ‘Profile’ menu option.</Typography>\r\n                                                        }\r\n                                                    </TabContainer>\r\n                                                }\r\n                                                {this.state.value === 1 && //Value = 1 for save address tab\r\n                                                    <TabContainer className={classes.saveAddressForm}>\r\n                                                        <FormControl required className={classes.formControl}>\r\n                                                            <InputLabel htmlFor=\"flat-building-name\">Flat / Building No.</InputLabel>\r\n                                                            <Input id=\"flat-building-name\" className=\"input-fields\" flatbuildingname={this.state.flatBuildingName} fullWidth={true} onChange={this.inputFlatBuildingNameChangeHandler} value={this.state.flatBuildingName} />\r\n                                                            <FormHelperText className={this.state.flatBuildingNameRequired}>\r\n                                                                <span className=\"red\">required</span>\r\n                                                            </FormHelperText>\r\n                                                        </FormControl>\r\n                                                        <br />\r\n                                                        <br />\r\n                                                        <FormControl className={classes.formControl}>\r\n                                                            <InputLabel htmlFor=\"locality\">Locality</InputLabel>\r\n                                                            <Input id=\"locality\" className=\"input-fields\" locality={this.state.locality} fullWidth={true} onChange={this.inputLocalityChangeHandler} value={this.state.locality} />\r\n                                                            <FormHelperText className={this.state.localityRequired}>\r\n                                                                <span className=\"red\">required</span>\r\n                                                            </FormHelperText>\r\n                                                        </FormControl>\r\n                                                        <br />\r\n                                                        <br />\r\n                                                        <FormControl required className={classes.formControl}>\r\n                                                            <InputLabel htmlFor=\"city\">City</InputLabel>\r\n                                                            <Input id=\"city\" className=\"input-fields\" type=\"text\" city={this.state.city} fullWidth={true} onChange={this.inputCityChangeHandler} value={this.state.city} />\r\n                                                            <FormHelperText className={this.state.cityRequired}>\r\n                                                                <span className=\"red\">required</span>\r\n                                                            </FormHelperText>\r\n                                                        </FormControl>\r\n                                                        <br />\r\n                                                        <br />\r\n                                                        <FormControl required className={classes.formControl}>\r\n                                                            <InputLabel htmlFor=\"state\">State</InputLabel>\r\n                                                            <Select id=\"state\" className={classes.selectField} state={this.state.selectedState} onChange={this.selectSelectedStateChangeHandler} MenuProps={{ style: { marginTop: '50px', maxHeight: '300px' } }} value={this.state.selectedState}>\r\n                                                                {this.state.states.map(state => (\r\n                                                                    <MenuItem value={state.id} key={state.id} >{state.state_name}</MenuItem>\r\n                                                                ))}\r\n                                                            </Select>\r\n                                                            <FormHelperText className={this.state.stateRequired}>\r\n                                                                <span className=\"red\">required</span>\r\n                                                            </FormHelperText>\r\n                                                        </FormControl>\r\n                                                        <br />\r\n                                                        <br />\r\n                                                        <FormControl required className={classes.formControl}>\r\n                                                            <InputLabel htmlFor=\"pincode\">Pincode</InputLabel>\r\n                                                            <Input id=\"pincode\" className=\"input-fields\" pincode={this.state.pincode} fullWidth={true} onChange={this.inputPincodeChangeHandler} value={this.state.pincode} />\r\n                                                            <FormHelperText className={this.state.pincodeRequired}>\r\n                                                                <span className=\"red\">required</span>\r\n                                                            </FormHelperText>\r\n                                                            <FormHelperText className={this.state.pincodeHelpText}>\r\n                                                                <span className=\"red\">Pincode must contain only numbers and must be 6 digits long</span>\r\n                                                            </FormHelperText>\r\n                                                        </FormControl>\r\n                                                        <br />\r\n                                                        <br />\r\n                                                        <br />\r\n                                                        <Button variant=\"contained\" className={classes.formButton} color=\"secondary\" onClick={this.saveAddressClickHandler}>SAVE ADDRESS</Button>\r\n                                                    </TabContainer>\r\n                                                }\r\n                                            </div>\r\n                                            :\r\n                                            <div className=\"payment-container\">\r\n                                                <FormControl component=\"fieldset\" className={classes.radioFormControl}>\r\n                                                    <FormLabel component=\"legend\">\r\n                                                        Select Mode of Payment\r\n                                                    </FormLabel>\r\n                                                    <RadioGroup aria-label=\"payment\" name=\"payment\" value={this.state.selectedPayment} onChange={this.radioChangeHandler}>\r\n                                                        {this.state.payment.map(payment => (\r\n                                                            <FormControlLabel key={payment.id} value={payment.id} control={<Radio />} label={payment.payment_name} />\r\n                                                        ))\r\n                                                        }\r\n                                                    </RadioGroup>\r\n                                                </FormControl>\r\n                                            </div>\r\n                                        }\r\n\r\n\r\n                                        <div className={classes.actionsContainer}>\r\n                                            <div>\r\n                                                <Button\r\n                                                    disabled={this.state.activeStep === 0}\r\n                                                    onClick={this.backButtonClickHandler}\r\n                                                    className={classes.button}\r\n                                                >\r\n                                                    Back\r\n                                                </Button>\r\n                                                <Button\r\n                                                    variant=\"contained\"\r\n                                                    color=\"primary\"\r\n                                                    onClick={this.nextButtonClickHandler}\r\n                                                    className={classes.button}\r\n                                                >\r\n                                                    {this.state.activeStep === this.state.steps.length - 1 ? 'Finish' : 'Next'}\r\n                                                </Button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </StepContent>\r\n                                </Step>\r\n                            ))}\r\n                        </Stepper>\r\n                        {this.state.activeStep === this.state.steps.length && (\r\n                            <Paper square elevation={0} className={classes.resetContainer}>\r\n                                <Typography>View the summary and place your order now!</Typography>\r\n                                <Button onClick={this.changeButtonClickHandler} className={classes.button}>\r\n                                    Change\r\n                             </Button>\r\n                            </Paper>\r\n                        )}\r\n\r\n                    </div>\r\n                    <div className=\"summary-container\">\r\n                        <Card className={classes.summary}>\r\n                            <CardHeader\r\n                                title=\"Summary\"\r\n                                titleTypographyProps={{\r\n                                    variant: 'h5'\r\n                                }}\r\n                                className={classes.summaryHeader}\r\n                            />\r\n                            <CardContent className={classes.cardContent}>\r\n                                <Typography variant='subtitle1' component='p' className={classes.restaurantName}>{this.state.restaurantDetails.name}</Typography>\r\n                                {this.state.cartItems.map(cartItem => (\r\n                                    <div className=\"menu-item-container\" key={cartItem.id}>\r\n                                        <i className=\"fa fa-stop-circle-o\" aria-hidden=\"true\" style={{ color: cartItem.itemType === \"NON_VEG\" ? \"#BE4A47\" : \"#5A9A5B\" }}></i>\r\n                                        <Typography variant=\"subtitle1\" component=\"p\" className={classes.menuItemName} id=\"summary-menu-item-name\" >{cartItem.name[0].toUpperCase() + cartItem.name.slice(1)}</Typography>\r\n                                        <Typography variant=\"subtitle1\" component=\"p\" className={classes.itemQuantity}>{cartItem.quantity}</Typography>\r\n                                        <div className=\"summary-item-price-container\">\r\n                                            <i className=\"fa fa-inr\" aria-hidden=\"true\" style={{ color: 'grey' }}></i>\r\n                                            <Typography variant=\"subtitle1\" component=\"p\" className={classes.itemPrice} id=\"summary-item-price\">{cartItem.totalAmount.toFixed(2)}</Typography>\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n                                <div className=\"coupon-container\">\r\n                                    <FormControl className={classes.formControlCoupon}>\r\n                                        <InputLabel htmlFor=\"coupon\">Coupon Code</InputLabel>\r\n                                        <FilledInput id=\"coupon\" className={classes.couponInput} value={this.state.couponName} onChange={this.inputCouponNameChangeHandler} placeholder=\"Ex: FLAT30\" />\r\n                                        <FormHelperText className={this.state.couponNameRequired}>\r\n                                            <span className=\"red\">required</span>\r\n                                        </FormHelperText>\r\n                                        <FormHelperText className={this.state.couponNameHelpText}>\r\n                                            <span className=\"red\">invalid coupon</span>\r\n                                        </FormHelperText>\r\n                                    </FormControl>\r\n                                    <Button variant=\"contained\" color=\"default\" className={classes.applyButton} onClick={this.applyButtonClickHandler} size=\"small\">APPLY</Button>\r\n                                </div>\r\n                                <div className=\"label-amount-container\">\r\n                                    <Typography variant=\"subtitle2\" component=\"p\" style={{ color: 'grey' }}>Sub Total</Typography>\r\n                                    <div className=\"amount\">\r\n                                        <i className=\"fa fa-inr\" aria-hidden=\"true\" style={{ color: 'grey' }}></i>\r\n                                        <Typography variant=\"subtitle1\" component=\"p\" style={{ color: 'grey' }} id=\"summary-net-amount\">{this.getSubTotal().toFixed(2)}</Typography>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"label-amount-container\">\r\n                                    <Typography variant=\"subtitle2\" component=\"p\" className={classes.netAmount} style={{ color: 'grey' }}>Discount</Typography>\r\n                                    <div className=\"amount\">\r\n                                        <i className=\"fa fa-inr\" aria-hidden=\"true\" style={{ color: 'grey' }}></i>\r\n                                        <Typography variant=\"subtitle1\" component=\"p\" style={{ color: 'grey' }} id=\"summary-net-amount\">{this.getDiscountAmount().toFixed(2)}</Typography>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                                <Divider className={classes.divider} />\r\n                                <div className=\"label-amount-container\">\r\n                                    <Typography variant=\"subtitle2\" component=\"p\" className={classes.netAmount}>Net Amount</Typography>\r\n                                    <div className=\"amount\">\r\n                                        <i className=\"fa fa-inr\" aria-hidden=\"true\" style={{ color: 'grey' }}></i>\r\n                                        <Typography variant=\"subtitle1\" component=\"p\" className={classes.itemPrice} id=\"summary-net-amount\">{this.getNetAmount().toFixed(2)}</Typography>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <Button variant=\"contained\" color='primary' fullWidth={true} className={classes.placeOrderButton} onClick={this.placeOrderButtonClickHandler}>PLACE ORDER</Button>\r\n\r\n                            </CardContent>\r\n\r\n                        </Card>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <Snackbar\r\n                        anchorOrigin={{\r\n                            vertical: 'bottom',\r\n                            horizontal: 'left',\r\n                        }}\r\n                        open={this.state.snackBarOpen}\r\n                        autoHideDuration={4000}\r\n                        onClose={this.snackBarClose}\r\n                        TransitionComponent={this.state.transition}\r\n                        ContentProps={{\r\n                            'aria-describedby': 'message-id',\r\n                        }}\r\n                        message={<span id=\"message-id\">{this.state.snackBarMessage}</span>}\r\n                        action={\r\n                            <IconButton color='inherit' onClick={this.snackBarClose}>\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                        }\r\n                    />\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Checkout);"]},"metadata":{},"sourceType":"module"}