{"ast":null,"code":"import _objectSpread from \"/Users/pradeeph/Documents/Upgrad_FullStackDevelopment/Upgrad_Capstone_FrontEnd/food-ordering-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Users/pradeeph/Documents/Upgrad_FullStackDevelopment/Upgrad_Capstone_FrontEnd/food-ordering-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pradeeph/Documents/Upgrad_FullStackDevelopment/Upgrad_Capstone_FrontEnd/food-ordering-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/pradeeph/Documents/Upgrad_FullStackDevelopment/Upgrad_Capstone_FrontEnd/food-ordering-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/pradeeph/Documents/Upgrad_FullStackDevelopment/Upgrad_Capstone_FrontEnd/food-ordering-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/pradeeph/Documents/Upgrad_FullStackDevelopment/Upgrad_Capstone_FrontEnd/food-ordering-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/pradeeph/Documents/Upgrad_FullStackDevelopment/Upgrad_Capstone_FrontEnd/food-ordering-app/src/common/header/Header.js\";\nimport React, { Component } from 'react';\nimport FastfoodIcon from '@material-ui/icons/Fastfood';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Input from '@material-ui/core/Input';\nimport { withStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Button from '@material-ui/core/Button';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport Modal from 'react-modal';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Fade from '@material-ui/core/Fade';\nimport { MenuList } from '@material-ui/core';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { Link } from 'react-router-dom';\nimport { FormControl, InputLabel, FormHelperText } from '@material-ui/core';\nimport './Header.css'; // Custom Styles to over ride material ui default styles\n\nvar styles = function styles(theme) {\n  return {\n    searchText: {\n      //Style for Search box\n      'color': 'white',\n      '&:after': {\n        borderBottom: '2px solid white'\n      }\n    },\n    loginButton: {\n      //Style for Login Button\n      \"font-weight\": 400,\n      \"margin\": \"8px 8px 8px 8px\"\n    },\n    formButton: {\n      //Style for the Form Buttons\n      \"font-weight\": 400\n    },\n    tab: {\n      // Tab Styling\n      \"font-weight\": 400\n    },\n    formControl: {\n      // Form Control Styling\n      \"width\": \"80%\"\n    },\n    profileButton: {\n      // Profile Button Styling\n      color: \"#c2c2c2\",\n      \"text-transform\": \"none\",\n      \"font-weight\": 400,\n      \"padding\": \"8px 8px 8px 8px\"\n    },\n    menuItems: {\n      //Style for the menu items\n      \"text-decoration\": \"none\",\n      \"color\": \"black\",\n      \"text-decoration-underline\": \"none\",\n      \"padding-top\": \"0px\",\n      \"padding-bottom\": \"0px\"\n    },\n    menuList: {\n      //Styling for the menulist component\n      padding: \"0px\"\n    }\n  };\n};\n\nvar customStyles = {\n  // Style for the Modal\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    transform: 'translate(-50%, -50%)'\n  }\n}; //Functional TabContainer Component to be used in the class\n\nvar TabContainer = function TabContainer(props) {\n  return /*#__PURE__*/React.createElement(Typography, {\n    component: \"div\",\n    style: {\n      padding: '0px',\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, props.children);\n};\n\nTabContainer.propTypes = {\n  children: PropTypes.node.isRequired\n}; // Creating Header class component to render the Header as per the design\n\nvar Header = /*#__PURE__*/function (_Component) {\n  _inherits(Header, _Component);\n\n  var _super = _createSuper(Header);\n\n  function Header() {\n    var _this;\n\n    _classCallCheck(this, Header);\n\n    _this = _super.call(this);\n\n    _this.closeModalHandler = function () {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        isModalOpen: false\n      })); //Changing badge visibility in the details page if login clicked in details page\n\n\n      if (_this.props.changeBadgeVisibility) {\n        _this.props.changeBadgeVisibility();\n      }\n    };\n\n    _this.loginButtonClickHandler = function () {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        isModalOpen: true,\n        loginContactNo: \"\",\n        loginContactNoRequired: \"dispNone\",\n        loginPassword: \"\",\n        loginPasswordRequired: \"dispNone\",\n        firstName: \"\",\n        firstNameRequired: \"dispNone\",\n        lastName: \"\",\n        email: \"\",\n        emailRequired: \"dispNone\",\n        invalidEmail: \"dispNone\",\n        signUpPassword: \"\",\n        signUpPasswordRequired: \"dispNone\",\n        signUpContactNo: \"\",\n        signUpContactNoRequired: \"dispNone\",\n        inValidLoginContact: \"dispNone\",\n        invalidPassword: \"dispNone\",\n        notRegisteredContact: \"dispNone\",\n        validPasswordHelpText: \"dispNone\",\n        contactNoRegistered: \"dispNone\",\n        contactHelpText: \"dispNone\"\n      })); //Changing badge visibility in the details page if login clicked in details page\n\n\n      if (_this.props.changeBadgeVisibility) {\n        _this.props.changeBadgeVisibility();\n      }\n    };\n\n    _this.openMenu = function () {\n      return _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        menuIsOpen: !_this.state.menuIsOpen\n      }));\n    };\n\n    _this.profileButtonClickHandler = function (event) {\n      _this.state.anchorEl ? _this.setState({\n        anchorEl: null\n      }) : _this.setState({\n        anchorEl: event.currentTarget\n      });\n\n      _this.openMenu();\n    };\n\n    _this.inputLoginContactNoChangeHandler = function (event) {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        loginContactNo: event.target.value\n      }));\n    };\n\n    _this.inputLoginPasswordChangeHandler = function (event) {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        loginPassword: event.target.value\n      }));\n    };\n\n    _this.inputFirstNameChangeHandler = function (event) {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        firstName: event.target.value\n      }));\n    };\n\n    _this.inputLastNameChangeHandler = function (event) {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        lastName: event.target.value\n      }));\n    };\n\n    _this.inputEmailChangeHandler = function (event) {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        email: event.target.value\n      }));\n    };\n\n    _this.inputSignUpPasswordChangeHandler = function (event) {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        signUpPassword: event.target.value\n      }));\n    };\n\n    _this.inputSignUpContactNoChangeHandler = function (event) {\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        signUpContactNo: event.target.value\n      }));\n    };\n\n    _this.inputSearchChangeHandler = function (event) {\n      var searchOn = true;\n\n      if (!(event.target.value === \"\")) {\n        var dataRestaurant = null;\n\n        var that = _assertThisInitialized(_this);\n\n        var xhrSearchRestaurant = new XMLHttpRequest();\n        xhrSearchRestaurant.addEventListener(\"readystatechange\", function () {\n          if (xhrSearchRestaurant.readyState === 4 && xhrSearchRestaurant.status === 200) {\n            var restaurant = JSON.parse(this.responseText).restaurants;\n            that.props.updateSearchRestaurant(restaurant, searchOn);\n          }\n        });\n        xhrSearchRestaurant.open('GET', _this.props.baseUrl + 'restaurant/name/' + event.target.value);\n        xhrSearchRestaurant.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhrSearchRestaurant.setRequestHeader(\"Cache-Control\", \"no-cache\");\n        xhrSearchRestaurant.send(dataRestaurant);\n      } else {\n        var restaurant = [];\n        searchOn = false;\n\n        _this.props.updateSearchRestaurant(restaurant, searchOn);\n      }\n    };\n\n    _this.tabsChangeHandler = function (event, value) {\n      _this.setState({\n        value\n      });\n    };\n\n    _this.loginClickHandler = function () {\n      //Checking if the details entered is valid only then the api call is made\n      if (_this.handleLoginFormValidation()) {\n        var dataLogin = null;\n        var xhrLogin = new XMLHttpRequest();\n\n        var that = _assertThisInitialized(_this);\n\n        xhrLogin.addEventListener(\"readystatechange\", function () {\n          if (this.readyState === 4) {\n            if (xhrLogin.status === 200) {\n              var loginResponse = JSON.parse(this.responseText);\n              sessionStorage.setItem(\"uuid\", JSON.parse(this.responseText).id);\n              sessionStorage.setItem(\"access-token\", xhrLogin.getResponseHeader(\"access-token\"));\n              sessionStorage.setItem(\"customer-name\", loginResponse.first_name);\n              that.setState(_objectSpread(_objectSpread({}, that.state), {}, {\n                loggedIn: true,\n                loggedInName: loginResponse.first_name,\n                snackBarMessage: \"Logged in successfully!\",\n                snackBarOpen: true\n              }));\n              that.closeModalHandler(); //close th modal on successful login\n            } else if (xhrLogin.status === 401) {\n              //Checking for the error and showing the corresponding message.\n              var _loginResponse = JSON.parse(this.responseText);\n\n              var notRegisteredContact = \"dispNone\";\n              var invalidPassword = \"dispNone\";\n\n              if (_loginResponse.code === 'ATH-001') {\n                notRegisteredContact = \"dispBlock\";\n              }\n\n              if (_loginResponse.code === 'ATH-002') {\n                invalidPassword = \"dispBlock\";\n              }\n\n              that.setState(_objectSpread(_objectSpread({}, that.state), {}, {\n                notRegisteredContact: notRegisteredContact,\n                invalidPassword: invalidPassword\n              }));\n            }\n          }\n        });\n        xhrLogin.open(\"POST\", _this.props.baseUrl + \"customer/login\");\n        xhrLogin.setRequestHeader(\"Authorization\", \"Basic \" + window.btoa(_this.state.loginContactNo + \":\" + _this.state.loginPassword));\n        xhrLogin.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhrLogin.setRequestHeader(\"Cache-Control\", \"no-cache\");\n        xhrLogin.send(dataLogin);\n      }\n    };\n\n    _this.handleLoginFormValidation = function () {\n      var loginContactNoRequired = \"dispNone\";\n      var loginPasswordRequired = \"dispNone\";\n      var inValidLoginContact = \"dispNone\";\n      var isFormValid = true;\n\n      if (_this.state.loginContactNo === \"\") {\n        //check for contact not empty\n        loginContactNoRequired = \"dispBlock\";\n        isFormValid = false;\n      }\n\n      if (_this.state.loginPassword === \"\") {\n        //Check for password not empty\n        loginPasswordRequired = \"dispBlock\";\n        isFormValid = false;\n      }\n\n      if (_this.state.loginContactNo !== \"\") {\n        //Check for contact format\n        var contactNo = \"[7-9][0-9]{9}\";\n\n        if (!_this.state.loginContactNo.match(contactNo)) {\n          inValidLoginContact = \"dispBlock\";\n          isFormValid = false;\n        }\n      }\n\n      _this.setState({\n        loginContactNoRequired: loginContactNoRequired,\n        loginPasswordRequired: loginPasswordRequired,\n        inValidLoginContact: inValidLoginContact\n      });\n\n      return isFormValid;\n    };\n\n    _this.signUpClickHandler = function () {\n      //Checking for the form validation\n      if (_this.signUpFormValidation()) {\n        var dataSignUp = JSON.stringify({\n          //Creating data for the post endpoint.\n          \"contact_number\": _this.state.signUpContactNo,\n          \"email_address\": _this.state.email,\n          \"first_name\": _this.state.firstName,\n          \"last_name\": _this.state.lastName,\n          \"password\": _this.state.signUpPassword\n        });\n        var xhrSignUp = new XMLHttpRequest();\n\n        var that = _assertThisInitialized(_this);\n\n        xhrSignUp.addEventListener(\"readystatechange\", function () {\n          if (this.readyState === 4) {\n            if (xhrSignUp.status === 201) {\n              that.setState(_objectSpread(_objectSpread({}, that.state), {}, {\n                value: 0,\n                snackBarMessage: \"Registered successfully! Please login now!\",\n                snackBarOpen: true\n              }));\n            }\n\n            if (xhrSignUp.status === 400) {\n              //checking if error to display the error message\n              var responseData = JSON.parse(this.responseText);\n\n              if (responseData.code === 'SGR-001') {\n                that.setState(_objectSpread(_objectSpread({}, that.state), {}, {\n                  contactNoRegistered: \"dispBlock\"\n                }));\n              }\n            }\n          }\n        });\n        xhrSignUp.open(\"POST\", _this.props.baseUrl + \"customer/signup\");\n        xhrSignUp.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhrSignUp.setRequestHeader(\"Cache-Control\", \"no-cache\");\n        xhrSignUp.send(dataSignUp);\n      }\n    };\n\n    _this.signUpFormValidation = function () {\n      var firstNameRequired = \"dispNone\";\n      var emailRequired = \"dispNone\";\n      var signUpPasswordRequired = \"dispNone\";\n      var signUpContactNoRequired = \"dispNone\";\n      var validPasswordHelpText = \"dispNone\";\n      var contactHelpText = \"dispNone\";\n      var invalidEmail = \"dispNone\";\n      var signUpFormValid = true;\n\n      if (_this.state.firstName === \"\") {\n        //Checking for the first name not empty\n        firstNameRequired = \"dispBlock\";\n        signUpFormValid = false;\n      }\n\n      if (_this.state.email === \"\") {\n        //Checking for the email not empty\n        emailRequired = \"dispBlock\";\n        signUpFormValid = false;\n      }\n\n      if (_this.state.email !== \"\") {\n        //Checking for the email format\n        if (!/^\\w+([-]?\\w+)*@\\w+([-]?\\w+)*(\\.\\w+)+$/.test(_this.state.email)) {\n          invalidEmail = \"dispBlock\";\n          signUpFormValid = false;\n        }\n      }\n\n      if (_this.state.signUpContactNo === \"\") {\n        // Checking for the contact not empty\n        signUpContactNoRequired = \"dispBlock\";\n        signUpFormValid = false;\n      }\n\n      if (_this.state.signUpContactNo !== \"\") {\n        //Checking for contact format\n        var contactNo = \"[7-9][0-9]{9}\";\n\n        if (!_this.state.signUpContactNo.match(contactNo)) {\n          contactHelpText = \"dispBlock\";\n          signUpFormValid = false;\n        }\n      }\n\n      if (_this.state.signUpPassword === \"\") {\n        //Checking for password not empty\n        signUpPasswordRequired = \"dispBlock\";\n        signUpFormValid = false;\n      }\n\n      if (_this.state.signUpPassword !== \"\") {\n        if (!_this.isValidPassword(_this.state.signUpPassword)) {\n          //Checking for password strength\n          validPasswordHelpText = \"dispBlock\";\n          signUpFormValid = false;\n        }\n      }\n\n      _this.setState({\n        firstNameRequired: firstNameRequired,\n        emailRequired: emailRequired,\n        contactHelpText: contactHelpText,\n        signUpPasswordRequired: signUpPasswordRequired,\n        signUpContactNoRequired: signUpContactNoRequired,\n        invalidEmail: invalidEmail,\n        validPasswordHelpText: validPasswordHelpText\n      });\n\n      return signUpFormValid;\n    };\n\n    _this.isValidPassword = function (password) {\n      var lowerCase = false;\n      var upperCase = false;\n      var number = false;\n      var specialCharacter = false;\n\n      if (password.length < 8) {\n        return false;\n      }\n\n      if (password.match(\"(?=.*[0-9]).*\")) {\n        number = true;\n      }\n\n      if (password.match(\"(?=.*[a-z]).*\")) {\n        lowerCase = true;\n      }\n\n      if (password.match(\"(?=.*[A-Z]).*\")) {\n        upperCase = true;\n      }\n\n      if (password.match(\"(?=.*[#@$%&*!^]).*\")) {\n        specialCharacter = true;\n      }\n\n      if (lowerCase && upperCase) {\n        if (specialCharacter && number) {\n          return true;\n        }\n      } else {\n        return false;\n      }\n\n      return false;\n    };\n\n    _this.snackBarClose = function (event, reason) {\n      if (reason === 'clickaway') {\n        return;\n      }\n\n      _this.setState(_objectSpread(_objectSpread({}, _this.state), {}, {\n        snackBarMessage: \"\",\n        snackBarOpen: false\n      }));\n    };\n\n    _this.onLogOutClickHandler = function () {\n      var logoutData = null;\n\n      var that = _assertThisInitialized(_this);\n\n      var xhrLogout = new XMLHttpRequest();\n      xhrLogout.addEventListener(\"readystatechange\", function () {\n        if (xhrLogout.readyState === 4 && xhrLogout.status === 200) {\n          sessionStorage.removeItem(\"uuid\"); //Clearing uuid\n\n          sessionStorage.removeItem(\"access-token\"); //Clearing access-token\n\n          sessionStorage.removeItem(\"customer-name\"); //Clearing customer-name\n\n          that.setState(_objectSpread(_objectSpread({}, that.state), {}, {\n            loggedIn: false,\n            menuIsOpen: !that.state.menuIsOpen\n          }));\n\n          if (that.props.logoutRedirect) {\n            that.props.logoutRedirect();\n          }\n        }\n      });\n      xhrLogout.open('POST', _this.props.baseUrl + 'customer/logout');\n      xhrLogout.setRequestHeader('authorization', 'Bearer ' + sessionStorage.getItem('access-token'));\n      xhrLogout.send(logoutData);\n    };\n\n    _this.state = {\n      isModalOpen: false,\n      menuIsOpen: false,\n      value: 0,\n      loginContactNo: \"\",\n      loginContactNoRequired: \"dispNone\",\n      loginPassword: \"\",\n      loginPasswordRequired: \"dispNone\",\n      firstName: \"\",\n      firstNameRequired: \"dispNone\",\n      lastName: \"\",\n      email: \"\",\n      emailRequired: \"dispNone\",\n      invalidEmail: \"dispNone\",\n      signUpPassword: \"\",\n      signUpPasswordRequired: \"dispNone\",\n      signUpContactNo: \"\",\n      signUpContactNoRequired: \"dispNone\",\n      inValidLoginContact: \"dispNone\",\n      invalidPassword: \"dispNone\",\n      notRegisteredContact: \"dispNone\",\n      validPasswordHelpText: \"dispNone\",\n      contactNoRegistered: \"dispNone\",\n      contactHelpText: \"dispNone\",\n      snackBarOpen: false,\n      snackBarMessage: \"\",\n      transition: Fade,\n      loggedIn: sessionStorage.getItem('access-token') === null ? false : true,\n      loggedInName: sessionStorage.getItem('customer-name')\n    };\n    return _this;\n  } // Method handles the close of the modal\n\n\n  _createClass(Header, [{\n    key: \"render\",\n    value: function render() {\n      // Styles are stored in the const classes\n      var classes = this.props.classes;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"header\", {\n        className: \"app-header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(FastfoodIcon, {\n        className: \"app-logo\",\n        fontSize: \"large\",\n        htmlColor: \"white\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 13\n        }\n      }), this.props.showHeaderSearchBox === true && /*#__PURE__*/React.createElement(\"span\", {\n        className: \"header-searchbox\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        className: classes.searchText,\n        startAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n          position: \"start\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 564,\n            columnNumber: 38\n          }\n        }, /*#__PURE__*/React.createElement(SearchIcon, {\n          id: \"search-icon\",\n          htmlColor: \"white\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 40\n          }\n        })),\n        fullWidth: true,\n        placeholder: \"Search by Restaurant Name\",\n        onChange: this.inputSearchChangeHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 29\n        }\n      })), this.state.loggedIn !== true ? /*#__PURE__*/React.createElement(Button, {\n        className: classes.loginButton,\n        size: \"large\",\n        variant: \"contained\",\n        onClick: this.loginButtonClickHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(AccountCircle, {\n        className: \"login-button-icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 19\n        }\n      }), \"LOGIN\") : /*#__PURE__*/React.createElement(Button, {\n        className: classes.profileButton,\n        size: \"large\",\n        variant: \"text\",\n        onClick: this.profileButtonClickHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(AccountCircle, {\n        className: \"profile-button-icon\",\n        htmlColor: \"#c2c2c2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 19\n        }\n      }), this.state.loggedInName), /*#__PURE__*/React.createElement(Menu, {\n        id: \"profile-menu\",\n        anchorEl: this.state.anchorEl,\n        open: this.state.menuIsOpen,\n        onClose: this.profileButtonClickHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(MenuList, {\n        className: classes.menuList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Link, {\n        to: \"/profile\",\n        className: classes.menuItems,\n        underline: \"none\",\n        color: \"default\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(MenuItem, {\n        className: classes.menuItems,\n        onClick: this.onMyProfileClicked,\n        disableGutters: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 587,\n          columnNumber: 19\n        }\n      }, \"My profile\")), /*#__PURE__*/React.createElement(MenuItem, {\n        className: \"menu-items\",\n        onClick: this.onLogOutClickHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 17\n        }\n      }, \"Logout\")))), /*#__PURE__*/React.createElement(Modal, {\n        ariaHideApp: false,\n        isOpen: this.state.isModalOpen,\n        contentLabel: \"Login\",\n        onRequestClose: this.closeModalHandler,\n        style: customStyles,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Tabs, {\n        className: \"login-modal-tabs\",\n        value: this.state.value,\n        onChange: this.tabsChangeHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Tab, {\n        label: \"LOGIN\",\n        className: classes.tab,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Tab, {\n        label: \"SIGNUP\",\n        className: classes.tab,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 15\n        }\n      })), this.state.value === 0 && /*#__PURE__*/React.createElement(TabContainer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        required: true,\n        className: classes.formControl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"login-contact-no\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 17\n        }\n      }, \"Contact No.\"), /*#__PURE__*/React.createElement(Input, {\n        id: \"login-contact-no\",\n        className: \"input-fields\",\n        fullWidth: true,\n        type: \"text\",\n        logincontactno: this.state.loginContactNo,\n        onChange: this.inputLoginContactNoChangeHandler,\n        value: this.state.loginContactNo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(FormHelperText, {\n        className: this.state.loginContactNoRequired,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"red\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 613,\n          columnNumber: 19\n        }\n      }, \"required\")), /*#__PURE__*/React.createElement(FormHelperText, {\n        className: this.state.inValidLoginContact,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 615,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"red\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 19\n        }\n      }, \"Invalid Contact\"))), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(FormControl, {\n        required: true,\n        className: classes.formControl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 622,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"login-password\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 17\n        }\n      }, \"Password\"), /*#__PURE__*/React.createElement(Input, {\n        id: \"login-password\",\n        className: \"input-fields\",\n        type: \"password\",\n        loginpassword: this.state.loginPassword,\n        fullWidth: true,\n        onChange: this.inputLoginPasswordChangeHandler,\n        value: this.state.loginPassword,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(FormHelperText, {\n        className: this.state.loginPasswordRequired,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 625,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"red\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 19\n        }\n      }, \"required\")), /*#__PURE__*/React.createElement(FormHelperText, {\n        className: this.state.invalidPassword,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"red\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 19\n        }\n      }, \"Invalid Credentials\")), /*#__PURE__*/React.createElement(FormHelperText, {\n        className: this.state.notRegisteredContact,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 631,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"red\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 19\n        }\n      }, \"This contact number has not been registered!\"))), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 636,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        className: classes.formButton,\n        color: \"primary\",\n        onClick: this.loginClickHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 15\n        }\n      }, \"LOGIN\")), this.state.value === 1 && /*#__PURE__*/React.createElement(TabContainer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 643,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        required: true,\n        className: classes.formControl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"first-name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 645,\n          columnNumber: 17\n        }\n      }, \"First Name\"), /*#__PURE__*/React.createElement(Input, {\n        id: \"first-name\",\n        className: \"input-fields\",\n        firstname: this.state.firstName,\n        fullWidth: true,\n        onChange: this.inputFirstNameChangeHandler,\n        value: this.state.firstName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 646,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(FormHelperText, {\n        className: this.state.firstNameRequired,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"red\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 19\n        }\n      }, \"required\"))), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 651,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 652,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(FormControl, {\n        className: classes.formControl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"last-name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 654,\n          columnNumber: 17\n        }\n      }, \"Last Name\"), /*#__PURE__*/React.createElement(Input, {\n        id: \"last-name\",\n        className: \"input-fields\",\n        lastname: this.state.lastName,\n        fullWidth: true,\n        onChange: this.inputLastNameChangeHandler,\n        value: this.state.lastName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 655,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(FormControl, {\n        required: true,\n        className: classes.formControl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"email\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 660,\n          columnNumber: 17\n        }\n      }, \"Email\"), /*#__PURE__*/React.createElement(Input, {\n        id: \"email\",\n        className: \"input-fields\",\n        type: \"email\",\n        email: this.state.email,\n        fullWidth: true,\n        onChange: this.inputEmailChangeHandler,\n        value: this.state.email,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(FormHelperText, {\n        className: this.state.emailRequired,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 662,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"red\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 663,\n          columnNumber: 19\n        }\n      }, \"required\")), /*#__PURE__*/React.createElement(FormHelperText, {\n        className: this.state.invalidEmail,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 665,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"red\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 19\n        }\n      }, \"Invalid Email\"))), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 669,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(FormControl, {\n        required: true,\n        className: classes.formControl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"sign-up-password\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 17\n        }\n      }, \"Password\"), /*#__PURE__*/React.createElement(Input, {\n        id: \"sign-up-password\",\n        className: \"input-fields\",\n        type: \"password\",\n        signuppassword: this.state.signUpPassword,\n        fullWidth: true,\n        onChange: this.inputSignUpPasswordChangeHandler,\n        value: this.state.signUpPassword,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 673,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(FormHelperText, {\n        className: this.state.signUpPasswordRequired,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 674,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"red\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 675,\n          columnNumber: 19\n        }\n      }, \"required\")), /*#__PURE__*/React.createElement(FormHelperText, {\n        className: this.state.validPasswordHelpText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"red\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 678,\n          columnNumber: 19\n        }\n      }, \"Password must contain at least one capital letter, one small letter, one number, and one special character\"))), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(FormControl, {\n        required: true,\n        className: classes.formControl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 683,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"sign-up-contactNo\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 684,\n          columnNumber: 17\n        }\n      }, \"Contact No.\"), /*#__PURE__*/React.createElement(Input, {\n        id: \"sign-up-contactNo\",\n        className: \"input-fields\",\n        signupcontactno: this.state.signUpContactNo,\n        fullWidth: true,\n        onChange: this.inputSignUpContactNoChangeHandler,\n        value: this.state.signUpContactNo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(FormHelperText, {\n        className: this.state.signUpContactNoRequired,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 686,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"red\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 687,\n          columnNumber: 19\n        }\n      }, \"required\")), /*#__PURE__*/React.createElement(FormHelperText, {\n        className: this.state.contactHelpText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"red\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 690,\n          columnNumber: 19\n        }\n      }, \"Contact No. must contain only numbers and must be 10 digits long\")), /*#__PURE__*/React.createElement(FormHelperText, {\n        className: this.state.contactNoRegistered,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 692,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"red\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 693,\n          columnNumber: 19\n        }\n      }, \"This contact number is already registered! Try other contact number.\"))), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 698,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        className: classes.formButton,\n        color: \"primary\",\n        onClick: this.signUpClickHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 699,\n          columnNumber: 15\n        }\n      }, \"SIGNUP\"))), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 703,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Snackbar, {\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'left'\n        },\n        open: this.state.snackBarOpen,\n        autoHideDuration: 4000,\n        onClose: this.snackBarClose,\n        TransitionComponent: this.state.transition,\n        ContentProps: {\n          'aria-describedby': 'message-id'\n        },\n        message: /*#__PURE__*/React.createElement(\"span\", {\n          id: \"message-id\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 716,\n            columnNumber: 26\n          }\n        }, this.state.snackBarMessage),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 704,\n          columnNumber: 13\n        }\n      })));\n    }\n  }]);\n\n  return Header;\n}(Component);\n\nexport default withStyles(styles)(Header);","map":{"version":3,"sources":["/Users/pradeeph/Documents/Upgrad_FullStackDevelopment/Upgrad_Capstone_FrontEnd/food-ordering-app/src/common/header/Header.js"],"names":["React","Component","FastfoodIcon","SearchIcon","Input","withStyles","InputAdornment","Button","AccountCircle","Modal","Tabs","Tab","Typography","PropTypes","Snackbar","Fade","MenuList","Menu","MenuItem","Link","FormControl","InputLabel","FormHelperText","styles","theme","searchText","borderBottom","loginButton","formButton","tab","formControl","profileButton","color","menuItems","menuList","padding","customStyles","content","top","left","right","bottom","marginRight","transform","TabContainer","props","textAlign","children","propTypes","node","isRequired","Header","closeModalHandler","setState","state","isModalOpen","changeBadgeVisibility","loginButtonClickHandler","loginContactNo","loginContactNoRequired","loginPassword","loginPasswordRequired","firstName","firstNameRequired","lastName","email","emailRequired","invalidEmail","signUpPassword","signUpPasswordRequired","signUpContactNo","signUpContactNoRequired","inValidLoginContact","invalidPassword","notRegisteredContact","validPasswordHelpText","contactNoRegistered","contactHelpText","openMenu","menuIsOpen","profileButtonClickHandler","event","anchorEl","currentTarget","inputLoginContactNoChangeHandler","target","value","inputLoginPasswordChangeHandler","inputFirstNameChangeHandler","inputLastNameChangeHandler","inputEmailChangeHandler","inputSignUpPasswordChangeHandler","inputSignUpContactNoChangeHandler","inputSearchChangeHandler","searchOn","dataRestaurant","that","xhrSearchRestaurant","XMLHttpRequest","addEventListener","readyState","status","restaurant","JSON","parse","responseText","restaurants","updateSearchRestaurant","open","baseUrl","setRequestHeader","send","tabsChangeHandler","loginClickHandler","handleLoginFormValidation","dataLogin","xhrLogin","loginResponse","sessionStorage","setItem","id","getResponseHeader","first_name","loggedIn","loggedInName","snackBarMessage","snackBarOpen","code","window","btoa","isFormValid","contactNo","match","signUpClickHandler","signUpFormValidation","dataSignUp","stringify","xhrSignUp","responseData","signUpFormValid","test","isValidPassword","password","lowerCase","upperCase","number","specialCharacter","length","snackBarClose","reason","onLogOutClickHandler","logoutData","xhrLogout","removeItem","logoutRedirect","getItem","transition","classes","showHeaderSearchBox","onMyProfileClicked","vertical","horizontal"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport FastfoodIcon from '@material-ui/icons/Fastfood';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Input from '@material-ui/core/Input';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Button from '@material-ui/core/Button';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport Modal from 'react-modal';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography'\r\nimport PropTypes from 'prop-types';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport { MenuList } from '@material-ui/core';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { Link } from 'react-router-dom';\r\nimport { FormControl, InputLabel, FormHelperText } from '@material-ui/core';\r\n\r\n\r\nimport './Header.css';\r\n\r\n\r\n// Custom Styles to over ride material ui default styles\r\nconst styles = (theme => ({\r\n  searchText: { //Style for Search box\r\n    'color': 'white',\r\n    '&:after': {\r\n      borderBottom: '2px solid white',\r\n    }\r\n  },\r\n  loginButton: { //Style for Login Button\r\n    \"font-weight\": 400,\r\n    \"margin\":\"8px 8px 8px 8px\"\r\n\r\n  },\r\n  formButton: { //Style for the Form Buttons\r\n    \"font-weight\": 400,\r\n  },\r\n  tab: { // Tab Styling\r\n    \"font-weight\": 400,\r\n  },\r\n  formControl: { // Form Control Styling\r\n    \"width\": \"80%\",\r\n  },\r\n  profileButton: { // Profile Button Styling\r\n    color: \"#c2c2c2\",\r\n    \"text-transform\": \"none\",\r\n    \"font-weight\": 400,\r\n    \"padding\":\"8px 8px 8px 8px\",\r\n  },\r\n  menuItems: {  //Style for the menu items\r\n    \"text-decoration\": \"none\",\r\n    \"color\": \"black\",\r\n    \"text-decoration-underline\": \"none\",\r\n    \"padding-top\": \"0px\",\r\n    \"padding-bottom\": \"0px\",\r\n  },\r\n  menuList: { //Styling for the menulist component\r\n    padding: \"0px\"\r\n  }\r\n\r\n\r\n}))\r\nconst customStyles = { // Style for the Modal\r\n  content: {\r\n    top: '50%',\r\n    left: '50%',\r\n    right: 'auto',\r\n    bottom: 'auto',\r\n    marginRight: '-50%',\r\n    transform: 'translate(-50%, -50%)'\r\n  }\r\n};\r\n\r\n//Functional TabContainer Component to be used in the class\r\nconst TabContainer = function (props) {\r\n  return (\r\n      <Typography component=\"div\" style={{ padding: '0px', textAlign: 'center' }}>\r\n        {props.children}\r\n      </Typography>\r\n  )\r\n}\r\n\r\nTabContainer.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n}\r\n\r\n\r\n// Creating Header class component to render the Header as per the design\r\nclass Header extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isModalOpen: false,\r\n      menuIsOpen: false,\r\n      value: 0,\r\n      loginContactNo: \"\",\r\n      loginContactNoRequired: \"dispNone\",\r\n      loginPassword: \"\",\r\n      loginPasswordRequired: \"dispNone\",\r\n      firstName: \"\",\r\n      firstNameRequired: \"dispNone\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      emailRequired: \"dispNone\",\r\n      invalidEmail: \"dispNone\",\r\n      signUpPassword: \"\",\r\n      signUpPasswordRequired: \"dispNone\",\r\n      signUpContactNo: \"\",\r\n      signUpContactNoRequired: \"dispNone\",\r\n      inValidLoginContact: \"dispNone\",\r\n      invalidPassword: \"dispNone\",\r\n      notRegisteredContact: \"dispNone\",\r\n      validPasswordHelpText: \"dispNone\",\r\n      contactNoRegistered: \"dispNone\",\r\n      contactHelpText: \"dispNone\",\r\n      snackBarOpen: false,\r\n      snackBarMessage: \"\",\r\n      transition: Fade,\r\n      loggedIn: sessionStorage.getItem('access-token') === null ? false : true,\r\n      loggedInName: sessionStorage.getItem('customer-name'),\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // Method handles the close of the modal\r\n  closeModalHandler = () => {\r\n    this.setState({\r\n      ...this.state,\r\n      isModalOpen: false\r\n    })\r\n    //Changing badge visibility in the details page if login clicked in details page\r\n    if(this.props.changeBadgeVisibility){\r\n      this.props.changeBadgeVisibility();\r\n    }\r\n  }\r\n\r\n  //This method is called when the login button in the header is clicked.\r\n  //Initiates all the variable used in the modal to default.\r\n  //Open the modal containing login and sign tabs.\r\n  loginButtonClickHandler = () => {\r\n    this.setState({\r\n      ...this.state,\r\n      isModalOpen: true,\r\n      loginContactNo: \"\",\r\n      loginContactNoRequired: \"dispNone\",\r\n      loginPassword: \"\",\r\n      loginPasswordRequired: \"dispNone\",\r\n      firstName: \"\",\r\n      firstNameRequired: \"dispNone\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      emailRequired: \"dispNone\",\r\n      invalidEmail: \"dispNone\",\r\n      signUpPassword: \"\",\r\n      signUpPasswordRequired: \"dispNone\",\r\n      signUpContactNo: \"\",\r\n      signUpContactNoRequired: \"dispNone\",\r\n      inValidLoginContact: \"dispNone\",\r\n      invalidPassword: \"dispNone\",\r\n      notRegisteredContact: \"dispNone\",\r\n      validPasswordHelpText: \"dispNone\",\r\n      contactNoRegistered: \"dispNone\",\r\n      contactHelpText: \"dispNone\",\r\n    })\r\n    //Changing badge visibility in the details page if login clicked in details page\r\n    if(this.props.changeBadgeVisibility){\r\n      this.props.changeBadgeVisibility();\r\n    }\r\n  }\r\n\r\n  //This method is called to open and close the menu\r\n  openMenu = () => this.setState({\r\n    ...this.state,\r\n    menuIsOpen: !this.state.menuIsOpen\r\n  })\r\n\r\n  //This method is called when profile button is clicked to show the menu\r\n  profileButtonClickHandler = (event) => {\r\n    this.state.anchorEl ? this.setState({ anchorEl: null }) : this.setState({ anchorEl: event.currentTarget });\r\n    this.openMenu();\r\n  };\r\n\r\n\r\n  //This method is called when the input in contact No is changed.\r\n  inputLoginContactNoChangeHandler = (event) => {\r\n    this.setState({\r\n      ...this.state,\r\n      loginContactNo: event.target.value,\r\n    })\r\n  }\r\n\r\n  //This method is called when the input in Password is changed.\r\n  inputLoginPasswordChangeHandler = (event) => {\r\n    this.setState({\r\n      ...this.state,\r\n      loginPassword: event.target.value,\r\n    })\r\n  }\r\n\r\n  //This method is called when the input in First name is changed.\r\n  inputFirstNameChangeHandler = (event) => {\r\n    this.setState({\r\n      ...this.state,\r\n      firstName: event.target.value,\r\n    })\r\n  }\r\n\r\n  //This method is called when the input in Last Name  is changed.\r\n  inputLastNameChangeHandler = (event) => {\r\n    this.setState({\r\n      ...this.state,\r\n      lastName: event.target.value,\r\n    })\r\n  }\r\n\r\n  //This method is called when the input in Email is changed.\r\n  inputEmailChangeHandler = (event) => {\r\n    this.setState({\r\n      ...this.state,\r\n      email: event.target.value,\r\n    })\r\n  }\r\n\r\n  //This method is called when the input in Signup Password is changed.\r\n  inputSignUpPasswordChangeHandler = (event) => {\r\n    this.setState({\r\n      ...this.state,\r\n      signUpPassword: event.target.value,\r\n    })\r\n  }\r\n\r\n  //This method is called when the input in sign up contact No is changed.\r\n  inputSignUpContactNoChangeHandler = (event) => {\r\n    this.setState({\r\n      ...this.state,\r\n      signUpContactNo: event.target.value,\r\n    })\r\n  }\r\n\r\n  //This method is called when the input in Search Box is changed.\r\n  //This in turn calls the function updateSearchRestaurant in the home page to update the searched restaurant list.\r\n  inputSearchChangeHandler = (event) => {\r\n    let searchOn = true\r\n    if (! (event.target.value === \"\")) {\r\n      let dataRestaurant = null;\r\n      let that = this\r\n      let xhrSearchRestaurant = new XMLHttpRequest();\r\n\r\n      xhrSearchRestaurant.addEventListener(\"readystatechange\", function () {\r\n        if (xhrSearchRestaurant.readyState === 4 && xhrSearchRestaurant.status === 200) {\r\n          var restaurant = JSON.parse(this.responseText).restaurants;\r\n          that.props.updateSearchRestaurant(restaurant,searchOn);\r\n        }\r\n      })\r\n\r\n      xhrSearchRestaurant.open('GET', this.props.baseUrl + 'restaurant/name/' + event.target.value)\r\n      xhrSearchRestaurant.setRequestHeader(\"Content-Type\", \"application/json\");\r\n      xhrSearchRestaurant.setRequestHeader(\"Cache-Control\", \"no-cache\");\r\n      xhrSearchRestaurant.send(dataRestaurant);\r\n\r\n    }else{\r\n      let restaurant =[];\r\n      searchOn = false\r\n      this.props.updateSearchRestaurant(restaurant,searchOn);\r\n\r\n    }\r\n  }\r\n\r\n\r\n  //This method is called to handle the change in the tabs.\r\n  tabsChangeHandler = (event, value) => {\r\n    this.setState({\r\n      value\r\n    });\r\n  }\r\n  //This method handles the click on login button in the login modal\r\n  //This method calls the login api and sends the login details as required by the endpoint.\r\n  //If the login is successful then adds the access-token,uuid and customer name to the session storage for further use.\r\n  //On successful login snackbar message is shown.\r\n  loginClickHandler = () => {\r\n\r\n    //Checking if the details entered is valid only then the api call is made\r\n    if (this.handleLoginFormValidation()) {\r\n      let dataLogin = null;\r\n      let xhrLogin = new XMLHttpRequest();\r\n      let that = this;\r\n      xhrLogin.addEventListener(\"readystatechange\", function () {\r\n        if (this.readyState === 4) {\r\n          if (xhrLogin.status === 200) {\r\n            let loginResponse = JSON.parse(this.responseText);\r\n            sessionStorage.setItem(\"uuid\", JSON.parse(this.responseText).id);\r\n            sessionStorage.setItem(\"access-token\", xhrLogin.getResponseHeader(\"access-token\"));\r\n            sessionStorage.setItem(\"customer-name\", loginResponse.first_name);\r\n            that.setState({\r\n              ...that.state,\r\n              loggedIn: true,\r\n              loggedInName: loginResponse.first_name,\r\n              snackBarMessage: \"Logged in successfully!\",\r\n              snackBarOpen: true,\r\n            })\r\n            that.closeModalHandler(); //close th modal on successful login\r\n          } else if (xhrLogin.status === 401) {  //Checking for the error and showing the corresponding message.\r\n            let loginResponse = JSON.parse(this.responseText);\r\n            let notRegisteredContact = \"dispNone\"\r\n            let invalidPassword = \"dispNone\"\r\n            if (loginResponse.code === 'ATH-001') {\r\n              notRegisteredContact = \"dispBlock\"\r\n            }\r\n            if (loginResponse.code === 'ATH-002') {\r\n              invalidPassword = \"dispBlock\"\r\n            }\r\n            that.setState({\r\n              ...that.state,\r\n              notRegisteredContact: notRegisteredContact,\r\n              invalidPassword: invalidPassword,\r\n            })\r\n          }\r\n        }\r\n      })\r\n      xhrLogin.open(\"POST\", this.props.baseUrl + \"customer/login\");\r\n      xhrLogin.setRequestHeader(\"Authorization\", \"Basic \" + window.btoa(this.state.loginContactNo + \":\" + this.state.loginPassword));\r\n      xhrLogin.setRequestHeader(\"Content-Type\", \"application/json\");\r\n      xhrLogin.setRequestHeader(\"Cache-Control\", \"no-cache\");\r\n      xhrLogin.send(dataLogin);\r\n    }\r\n\r\n  }\r\n\r\n  //This method is called to validate the login form\r\n  //If all the parameters are right then returns true for the api call to be made if not displays the relevant error message.\r\n  handleLoginFormValidation = () => {\r\n    let loginContactNoRequired = \"dispNone\";\r\n    let loginPasswordRequired = \"dispNone\";\r\n    let inValidLoginContact = \"dispNone\";\r\n    let isFormValid = true;\r\n    if (this.state.loginContactNo === \"\") { //check for contact not empty\r\n      loginContactNoRequired = \"dispBlock\";\r\n      isFormValid = false;\r\n    }\r\n    if (this.state.loginPassword === \"\") { //Check for password not empty\r\n      loginPasswordRequired = \"dispBlock\"\r\n      isFormValid = false;\r\n    }\r\n    if (this.state.loginContactNo !== \"\") { //Check for contact format\r\n      var contactNo = \"[7-9][0-9]{9}\";\r\n      if (!this.state.loginContactNo.match(contactNo)) {\r\n        inValidLoginContact = \"dispBlock\"\r\n        isFormValid = false;\r\n      }\r\n    }\r\n    this.setState({\r\n      loginContactNoRequired: loginContactNoRequired,\r\n      loginPasswordRequired: loginPasswordRequired,\r\n      inValidLoginContact: inValidLoginContact\r\n    })\r\n    return (isFormValid);\r\n  }\r\n\r\n  //This method is called to sign up the customer when the sign up button from the sign up modal is clicked\r\n  //This method calls the sign up api and sends the data as required by the endpoint\r\n  //If sign up is successful move to login modal for logging if not then displays relevant error message.\r\n  //On successful sign up snackBar message is displayed\r\n  signUpClickHandler = () => {\r\n\r\n    //Checking for the form validation\r\n    if (this.signUpFormValidation()) {\r\n      let dataSignUp = JSON.stringify({ //Creating data for the post endpoint.\r\n        \"contact_number\": this.state.signUpContactNo,\r\n        \"email_address\": this.state.email,\r\n        \"first_name\": this.state.firstName,\r\n        \"last_name\": this.state.lastName,\r\n        \"password\": this.state.signUpPassword\r\n      });\r\n\r\n      let xhrSignUp = new XMLHttpRequest();\r\n      let that = this;\r\n      xhrSignUp.addEventListener(\"readystatechange\", function () {\r\n        if (this.readyState === 4) {\r\n          if (xhrSignUp.status === 201) {\r\n            that.setState({\r\n              ...that.state,\r\n              value: 0,\r\n              snackBarMessage: \"Registered successfully! Please login now!\",\r\n              snackBarOpen: true,\r\n            })\r\n          }\r\n          if (xhrSignUp.status === 400) { //checking if error to display the error message\r\n            let responseData = JSON.parse(this.responseText)\r\n            if (responseData.code === 'SGR-001') {\r\n              that.setState({\r\n                ...that.state,\r\n                contactNoRegistered: \"dispBlock\"\r\n              })\r\n            }\r\n          }\r\n        }\r\n      });\r\n      xhrSignUp.open(\"POST\", this.props.baseUrl + \"customer/signup\");\r\n      xhrSignUp.setRequestHeader(\"Content-Type\", \"application/json\");\r\n      xhrSignUp.setRequestHeader(\"Cache-Control\", \"no-cache\");\r\n      xhrSignUp.send(dataSignUp);\r\n    }\r\n  }\r\n\r\n  //This Method is called to check the sign up form valid.\r\n  //This Method return true if all the data are in right format and valid otherwise displays error message.\r\n  signUpFormValidation = () => {\r\n    let firstNameRequired = \"dispNone\";\r\n    let emailRequired = \"dispNone\";\r\n    let signUpPasswordRequired = \"dispNone\";\r\n    let signUpContactNoRequired = \"dispNone\";\r\n    let validPasswordHelpText = \"dispNone\";\r\n    let contactHelpText = \"dispNone\";\r\n    let invalidEmail = \"dispNone\";\r\n    let signUpFormValid = true;\r\n\r\n    if (this.state.firstName === \"\") { //Checking for the first name not empty\r\n      firstNameRequired = \"dispBlock\";\r\n      signUpFormValid = false;\r\n    }\r\n    if (this.state.email === \"\") { //Checking for the email not empty\r\n      emailRequired = \"dispBlock\";\r\n      signUpFormValid = false;\r\n    }\r\n    if (this.state.email !== \"\") { //Checking for the email format\r\n\r\n      if (!(/^\\w+([-]?\\w+)*@\\w+([-]?\\w+)*(\\.\\w+)+$/.test(this.state.email))) {\r\n        invalidEmail = \"dispBlock\"\r\n        signUpFormValid = false;\r\n      }\r\n    }\r\n    if (this.state.signUpContactNo === \"\") { // Checking for the contact not empty\r\n      signUpContactNoRequired = \"dispBlock\";\r\n      signUpFormValid = false;\r\n    }\r\n    if (this.state.signUpContactNo !== \"\") { //Checking for contact format\r\n      var contactNo = \"[7-9][0-9]{9}\";\r\n      if (!this.state.signUpContactNo.match(contactNo)) {\r\n        contactHelpText = \"dispBlock\"\r\n        signUpFormValid = false;\r\n      }\r\n    }\r\n    if (this.state.signUpPassword === \"\") { //Checking for password not empty\r\n      signUpPasswordRequired = \"dispBlock\";\r\n      signUpFormValid = false;\r\n    }\r\n    if (this.state.signUpPassword !== \"\") {\r\n      if (!this.isValidPassword(this.state.signUpPassword)) { //Checking for password strength\r\n        validPasswordHelpText = \"dispBlock\"\r\n        signUpFormValid = false;\r\n\r\n      }\r\n    }\r\n    this.setState({\r\n      firstNameRequired: firstNameRequired,\r\n      emailRequired: emailRequired,\r\n      contactHelpText: contactHelpText,\r\n      signUpPasswordRequired: signUpPasswordRequired,\r\n      signUpContactNoRequired: signUpContactNoRequired,\r\n      invalidEmail: invalidEmail,\r\n      validPasswordHelpText: validPasswordHelpText,\r\n    })\r\n    return (signUpFormValid);\r\n\r\n  }\r\n\r\n  //This method is called to check the password strength.\r\n  isValidPassword = (password) => {\r\n    let lowerCase = false;\r\n    let upperCase = false;\r\n    let number = false;\r\n    let specialCharacter = false;\r\n\r\n\r\n    if (password.length < 8) {\r\n      return false;\r\n    }\r\n\r\n    if (password.match(\"(?=.*[0-9]).*\")) {\r\n      number = true;\r\n    }\r\n\r\n    if (password.match(\"(?=.*[a-z]).*\")) {\r\n      lowerCase = true;\r\n    }\r\n    if (password.match(\"(?=.*[A-Z]).*\")) {\r\n      upperCase = true;\r\n    }\r\n    if (password.match(\"(?=.*[#@$%&*!^]).*\")) {\r\n      specialCharacter = true;\r\n    }\r\n\r\n    if (lowerCase && upperCase) {\r\n      if (specialCharacter && number) {\r\n        return true;\r\n      }\r\n    } else {\r\n      return false;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  //This method handles the snackbar close.\r\n  snackBarClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    this.setState({\r\n      ...this.state,\r\n      snackBarMessage: \"\",\r\n      snackBarOpen: false,\r\n    })\r\n  }\r\n\r\n  // This method is called when the customer clicks log out from the profile menu\r\n  //This method inturn uses logout endpoint to log out the customer\r\n  //Also while log out clears all the session data\r\n  onLogOutClickHandler = () => {\r\n    let logoutData = null;\r\n    let that = this\r\n    let xhrLogout = new XMLHttpRequest();\r\n    xhrLogout.addEventListener(\"readystatechange\", function () {\r\n      if (xhrLogout.readyState === 4 && xhrLogout.status === 200) {\r\n        sessionStorage.removeItem(\"uuid\"); //Clearing uuid\r\n        sessionStorage.removeItem(\"access-token\"); //Clearing access-token\r\n        sessionStorage.removeItem(\"customer-name\"); //Clearing customer-name\r\n        that.setState({\r\n          ...that.state,\r\n          loggedIn: false,\r\n          menuIsOpen: !that.state.menuIsOpen,\r\n        });\r\n\r\n        if (that.props.logoutRedirect) {\r\n          that.props.logoutRedirect();\r\n        }\r\n      }\r\n\r\n    })\r\n\r\n    xhrLogout.open('POST', this.props.baseUrl + 'customer/logout');\r\n    xhrLogout.setRequestHeader('authorization', 'Bearer ' + sessionStorage.getItem('access-token'));\r\n    xhrLogout.send(logoutData);\r\n\r\n\r\n  }\r\n\r\n  render() {\r\n    // Styles are stored in the const classes\r\n    const { classes } = this.props;\r\n    return (\r\n        <div>\r\n          <header className=\"app-header\">\r\n            <FastfoodIcon className=\"app-logo\" fontSize=\"large\" htmlColor=\"white\" />\r\n            {this.props.showHeaderSearchBox === true &&\r\n            <span className=\"header-searchbox\">\r\n                            <Input className={classes.searchText}\r\n                                   startAdornment={\r\n                                     <InputAdornment position=\"start\">\r\n                                       <SearchIcon id=\"search-icon\" htmlColor=\"white\"></SearchIcon>\r\n                                     </InputAdornment>\r\n                                   }\r\n                                   fullWidth={true} placeholder=\"Search by Restaurant Name\" onChange={this.inputSearchChangeHandler} />\r\n                        </span>\r\n            }\r\n\r\n            {/* Checks for loggedIn if not then displays the login button else profile button */}\r\n\r\n            {this.state.loggedIn !== true ?\r\n                <Button className={classes.loginButton} size=\"large\" variant=\"contained\" onClick={this.loginButtonClickHandler}>\r\n                  <AccountCircle className=\"login-button-icon\" />\r\n                  LOGIN\r\n                </Button>\r\n                : <Button className={classes.profileButton} size=\"large\" variant=\"text\" onClick={this.profileButtonClickHandler}>\r\n                  <AccountCircle className=\"profile-button-icon\" htmlColor=\"#c2c2c2\" />\r\n                  {this.state.loggedInName}\r\n                </Button>\r\n            }\r\n            <Menu id=\"profile-menu\" anchorEl={this.state.anchorEl} open={this.state.menuIsOpen} onClose={this.profileButtonClickHandler}>\r\n              <MenuList className={classes.menuList}>\r\n                <Link to={\"/profile\"} className={classes.menuItems} underline=\"none\" color={\"default\"}>\r\n                  <MenuItem className={classes.menuItems} onClick={this.onMyProfileClicked} disableGutters={false}>My profile</MenuItem>\r\n                </Link>\r\n                <MenuItem className=\"menu-items\" onClick={this.onLogOutClickHandler}>Logout</MenuItem>\r\n              </MenuList>\r\n            </Menu>\r\n          </header>\r\n          <Modal\r\n              ariaHideApp={false}\r\n              isOpen={this.state.isModalOpen}\r\n              contentLabel=\"Login\"\r\n              onRequestClose={this.closeModalHandler}\r\n              style={customStyles}\r\n          >\r\n            <Tabs className=\"login-modal-tabs\" value={this.state.value} onChange={this.tabsChangeHandler}>\r\n              <Tab label=\"LOGIN\" className={classes.tab} />\r\n              <Tab label=\"SIGNUP\" className={classes.tab} />\r\n            </Tabs>\r\n\r\n            {/* Checking for value based on the value the tabs are shown */}\r\n            {/* login form */}\r\n            {this.state.value === 0 &&\r\n            <TabContainer>\r\n              <FormControl required className={classes.formControl}>\r\n                <InputLabel htmlFor=\"login-contact-no\">Contact No.</InputLabel>\r\n                <Input id=\"login-contact-no\" className=\"input-fields\" fullWidth={true} type=\"text\" logincontactno={this.state.loginContactNo} onChange={this.inputLoginContactNoChangeHandler} value={this.state.loginContactNo} />\r\n                <FormHelperText className={this.state.loginContactNoRequired}>\r\n                  <span className='red'>required</span>\r\n                </FormHelperText>\r\n                <FormHelperText className={this.state.inValidLoginContact}>\r\n                  <span className=\"red\">Invalid Contact</span>\r\n                </FormHelperText>\r\n\r\n              </FormControl>\r\n              <br />\r\n              <br />\r\n              <FormControl required className={classes.formControl}>\r\n                <InputLabel htmlFor=\"login-password\">Password</InputLabel>\r\n                <Input id=\"login-password\" className=\"input-fields\" type=\"password\" loginpassword={this.state.loginPassword} fullWidth={true} onChange={this.inputLoginPasswordChangeHandler} value={this.state.loginPassword} />\r\n                <FormHelperText className={this.state.loginPasswordRequired}>\r\n                  <span className='red'>required</span>\r\n                </FormHelperText>\r\n                <FormHelperText className={this.state.invalidPassword}>\r\n                  <span className=\"red\">Invalid Credentials</span>\r\n                </FormHelperText>\r\n                <FormHelperText className={this.state.notRegisteredContact}>\r\n                  <span className=\"red\">This contact number has not been registered!</span>\r\n                </FormHelperText>\r\n              </FormControl>\r\n              <br />\r\n              <br />\r\n              <br />\r\n              <Button variant=\"contained\" className={classes.formButton} color=\"primary\" onClick={this.loginClickHandler}>LOGIN</Button>\r\n            </TabContainer>\r\n            }\r\n            {/* Signup Form  */}\r\n            {this.state.value === 1 &&\r\n            <TabContainer>\r\n              <FormControl required className={classes.formControl}>\r\n                <InputLabel htmlFor=\"first-name\">First Name</InputLabel>\r\n                <Input id=\"first-name\" className=\"input-fields\" firstname={this.state.firstName} fullWidth={true} onChange={this.inputFirstNameChangeHandler} value={this.state.firstName} />\r\n                <FormHelperText className={this.state.firstNameRequired}>\r\n                  <span className=\"red\">required</span>\r\n                </FormHelperText>\r\n              </FormControl>\r\n              <br />\r\n              <br />\r\n              <FormControl className={classes.formControl}>\r\n                <InputLabel htmlFor=\"last-name\">Last Name</InputLabel>\r\n                <Input id=\"last-name\" className=\"input-fields\" lastname={this.state.lastName} fullWidth={true} onChange={this.inputLastNameChangeHandler} value={this.state.lastName} />\r\n              </FormControl>\r\n              <br />\r\n              <br />\r\n              <FormControl required className={classes.formControl}>\r\n                <InputLabel htmlFor=\"email\">Email</InputLabel>\r\n                <Input id=\"email\" className=\"input-fields\" type=\"email\" email={this.state.email} fullWidth={true} onChange={this.inputEmailChangeHandler} value={this.state.email} />\r\n                <FormHelperText className={this.state.emailRequired}>\r\n                  <span className=\"red\">required</span>\r\n                </FormHelperText>\r\n                <FormHelperText className={this.state.invalidEmail}>\r\n                  <span className=\"red\">Invalid Email</span>\r\n                </FormHelperText>\r\n              </FormControl>\r\n              <br />\r\n              <br />\r\n              <FormControl required className={classes.formControl}>\r\n                <InputLabel htmlFor=\"sign-up-password\">Password</InputLabel>\r\n                <Input id=\"sign-up-password\" className=\"input-fields\" type=\"password\" signuppassword={this.state.signUpPassword} fullWidth={true} onChange={this.inputSignUpPasswordChangeHandler} value={this.state.signUpPassword} />\r\n                <FormHelperText className={this.state.signUpPasswordRequired}>\r\n                  <span className=\"red\">required</span>\r\n                </FormHelperText>\r\n                <FormHelperText className={this.state.validPasswordHelpText}>\r\n                  <span className=\"red\">Password must contain at least one capital letter, one small letter, one number, and one special character</span>\r\n                </FormHelperText>\r\n              </FormControl>\r\n              <br />\r\n              <br />\r\n              <FormControl required className={classes.formControl}>\r\n                <InputLabel htmlFor=\"sign-up-contactNo\">Contact No.</InputLabel>\r\n                <Input id=\"sign-up-contactNo\" className=\"input-fields\" signupcontactno={this.state.signUpContactNo} fullWidth={true} onChange={this.inputSignUpContactNoChangeHandler} value={this.state.signUpContactNo} />\r\n                <FormHelperText className={this.state.signUpContactNoRequired}>\r\n                  <span className=\"red\">required</span>\r\n                </FormHelperText>\r\n                <FormHelperText className={this.state.contactHelpText}>\r\n                  <span className=\"red\">Contact No. must contain only numbers and must be 10 digits long</span>\r\n                </FormHelperText>\r\n                <FormHelperText className={this.state.contactNoRegistered}>\r\n                  <span className=\"red\">This contact number is already registered! Try other contact number.</span>\r\n                </FormHelperText>\r\n              </FormControl>\r\n              <br />\r\n              <br />\r\n              <br />\r\n              <Button variant=\"contained\" className={classes.formButton} color=\"primary\" onClick={this.signUpClickHandler}>SIGNUP</Button>\r\n            </TabContainer>\r\n            }\r\n          </Modal>\r\n          <div>\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                  vertical: 'bottom',\r\n                  horizontal: 'left',\r\n                }}\r\n                open={this.state.snackBarOpen}\r\n                autoHideDuration={4000}\r\n                onClose={this.snackBarClose}\r\n                TransitionComponent={this.state.transition}\r\n                ContentProps={{\r\n                  'aria-describedby': 'message-id',\r\n                }}\r\n                message={<span id=\"message-id\">{this.state.snackBarMessage}</span>}\r\n            />\r\n          </div>\r\n\r\n        </div>\r\n\r\n    )\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\nexport default withStyles(styles)(Header);  "]},"metadata":{},"sourceType":"module"}